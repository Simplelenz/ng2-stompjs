var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/MyStompRService.html",[0,0.414,1,1.723]],["body/classes/MyStompRService.html",[0,0.569,1,2.055,2,0.986,3,0.866,4,0.497,5,1.475,6,1.801,7,1.389,8,0.866,9,2.34,10,2.225,11,3.717,12,1.283,13,2.527,14,2.786,15,2.057,16,2.057,17,3.268,18,3.268,19,2.366,20,1.502,21,0.052,22,2.751,23,1.058,24,0.803,25,1.151,26,1.801,27,1.123,28,1.58,29,1.581,30,1.788,31,0.866,32,2.839,33,2.057,34,1.475,35,2.055,36,1.565,37,1.475,38,0.866,39,1.475,40,2.038,41,1.475,42,2.038,43,1.283,44,1.207,45,1.948,46,1.283,47,1.788,48,1.788,49,1.283,50,2.055,51,1.283,52,1.283,53,1.788,54,1.565,55,2.048,56,2.057,57,1.283,58,1.218,59,1.283,60,1.283,61,1.123,62,1.565,63,1.283,64,1.283,65,1.123,66,1.123,67,1.123,68,1.283,69,0.986,70,1.283,71,2.038,72,1.475,73,1.475,74,1.475,75,1.283,76,1.283,77,1.475,78,1.715,79,1.715,80,2.038,81,2.839,82,1.715,83,2.038,84,0.032,85,0.032]],["title/classes/MyStompService.html",[0,0.414,77,1.723]],["body/classes/MyStompService.html",[0,0.561,1,1.439,2,0.962,3,0.845,4,0.485,5,1.439,6,1.777,7,1.186,8,0.845,9,2.319,10,2.202,11,3.684,12,1.757,14,2.765,15,2.03,16,2.03,17,3.225,18,3.225,19,2.335,20,1.486,21,0.052,22,2.715,23,1.04,24,0.913,25,1.244,26,1.777,27,1.096,28,1.566,29,1.56,30,1.757,31,0.845,32,2.791,33,2.03,34,1.439,35,2.02,36,1.538,37,1.439,38,0.845,39,1.439,40,1.988,41,1.439,42,1.988,43,1.252,44,1.186,45,1.927,46,1.252,47,1.757,48,1.757,49,1.252,50,2.02,51,1.252,52,1.252,53,1.757,54,1.538,55,2.03,56,2.03,57,1.252,58,1.202,59,1.252,60,1.252,61,1.096,62,1.538,63,1.252,64,1.252,65,1.096,66,1.096,67,1.096,68,1.252,69,0.962,70,1.252,71,1.988,72,1.439,73,1.439,74,1.439,75,1.252,76,1.252,77,2.02,78,1.674,79,2.35,80,1.988,81,2.791,82,1.674,83,1.988,84,0.032,85,0.032,86,1.252,87,2.465,88,2.465,89,0.962,90,0.962,91,0.962,92,1.252,93,2.465]],["title/injectables/StompConfig.html",[25,0.775,94,0.34]],["body/injectables/StompConfig.html",[0,0.285,2,0.791,3,0.695,4,0.399,8,0.695,12,2.249,16,1.526,20,1.357,21,0.052,23,0.903,24,0.686,25,0.789,26,1.336,27,1.336,28,0.695,29,1.173,33,2.249,34,1.754,36,1.336,37,1.754,38,1.03,39,1.754,44,1.518,45,2.175,46,1.526,47,1.526,48,1.526,49,1.526,51,2.011,52,2.011,53,2.249,54,1.969,55,2.093,56,2.391,57,2.011,58,1.332,59,2.011,60,1.526,61,1.336,62,1.76,63,1.526,64,1.526,65,1.336,66,1.336,67,1.336,68,1.526,69,1.173,70,2.011,75,2.249,84,0.027,85,0.027,89,1.173,91,1.728,94,0.412,95,1.635,96,1.029,97,3.006,98,1.526,99,2.689,100,1.545,101,3.581,102,2.028,103,2.424,104,2.312,105,2.028,106,2.328,107,3.006,108,3.006,109,1.336,110,3.006,111,2.689,112,3.266,113,2.028,114,3.006,115,2.028,116,3.006,117,2.028,118,2.028,119,1.336,120,2.424,121,0.903,122,1.526,123,1.173,124,1.754,125,2.011,126,1.526,127,2.424,128,2.041,129,3.006,130,3.006,131,2.041,132,2.424,133,1.029,134,1.184]],["title/injectables/StompRPCConfig.html",[94,0.34,135,2.004]],["body/injectables/StompRPCConfig.html",[0,0.543,2,1.511,3,1.327,4,0.761,6,1.72,21,0.049,23,1.396,28,1.327,31,1.592,84,0.042,85,0.042,94,0.573,96,1.966,121,1.164,125,2.358,133,1.966,135,3.154,136,1.966,137,3.122,138,2.358,139,2.358,140,3.746,141,4.646,142,2.26]],["title/injectables/StompRPCService.html",[94,0.34,143,1.723]],["body/injectables/StompRPCService.html",[0,0.52,2,1.446,3,1.271,4,0.729,6,1.647,21,0.05,23,1.36,28,1.271,31,1.551,84,0.041,85,0.041,94,0.562,96,1.882,119,2.011,121,1.114,124,2.641,133,1.882,136,1.882,138,2.297,140,2.99,142,2.164,143,2.641,144,2.99,145,3.072,146,1.765,147,1.36,148,2.297,149,4.525,150,3.707,151,3.707,152,2.517,153,2.517,154,3.707]],["title/injectables/StompRService.html",[7,1.012,94,0.34]],["body/injectables/StompRService.html",[0,0.316,2,0.395,3,0.347,4,0.199,6,0.45,7,0.591,8,0.347,9,1.647,10,2.359,12,2.16,15,1.349,19,1.551,20,1.683,21,0.052,22,2.476,23,1.096,24,0.606,25,0.453,27,1.442,28,0.347,34,1.551,36,0.45,38,1.112,44,1.556,45,0.766,54,1.539,58,1.184,65,1,66,1,67,1.539,84,0.016,85,0.016,86,1.143,89,0.878,90,1.163,91,0.878,92,1.143,94,0.259,96,0.514,98,1.513,100,1.864,104,2.021,106,2.202,109,1.325,119,1.181,121,1.447,122,2.202,126,1.349,133,0.514,134,0.591,136,2.202,139,1.143,142,0.591,146,1.037,147,1.251,148,2.462,155,0.816,156,1.006,157,1.723,158,1.39,159,1.006,160,1.723,161,1.723,162,1.723,163,2.143,164,2.616,165,1.647,166,2.299,167,1.39,168,1.551,169,1.39,170,1.39,171,2.755,172,1.551,173,1.39,174,1.17,175,1.39,176,0.672,177,2.792,178,2.021,179,2.143,180,1.551,181,1.723,182,2.251,183,2.251,184,2.251,185,2.251,186,2.251,187,1.012,188,1.012,189,1.012,190,1.39,191,2.658,192,1.012,193,1.17,194,1.39,195,1.39,196,2.143,197,1.723,198,1.006,199,3.462,200,1.012,201,1.39,202,1.012,203,2.658,204,1.006,205,1.17,206,1.723,207,1.723,208,1.723,209,1.723,210,2.658,211,1.723,212,1.723,213,1.17,214,1.723,215,1.17,216,1.349,217,1.723,218,2.143,219,1.17,220,1.17,221,1.723,222,1.723,223,1.723,224,1.17,225,1.006,226,1.723,227,2.616,228,1.012,229,3.244,230,2.143,231,2.143,232,3.244,233,1.723,234,1.723,235,1.012,236,1.012,237,4.162,238,2.143,239,1.723,240,1.17,241,0.766,242,1.17,243,1.723,244,2.658,245,2.143,246,1.723,247,1.723,248,2.251,249,1.012,250,1.012,251,1.17,252,2.143,253,1.815,254,1.39,255,1.39,256,1.39,257,1.012,258,1.012,259,3.067,260,1.012,261,1.012,262,1.723,263,1.012,264,1.012,265,1.012,266,1.012,267,1.012,268,1.012,269,1.723,270,2.251,271,2.658,272,0.816,273,0.816,274,1.012,275,1.815,276,0.816,277,1.012,278,1.012,279,1.012,280,2.658,281,1.012,282,1.012,283,1.012,284,1.723,285,1.012,286,1.012,287,1.012,288,1.012,289,1.012,290,1.012,291,1.012,292,1.012,293,1.012,294,1.006,295,1.012,296,1.012,297,1.723,298,1.012,299,0.816,300,0.816,301,1.012,302,1.012,303,1.012,304,1.012,305,1.012,306,1.012,307,1.012,308,1.012,309,1.723,310,1.012,311,1.012,312,1.012,313,1.012,314,1.012,315,1.723,316,0.816,317,1.012,318,2.981,319,1.012,320,1.012,321,1.012,322,1.012,323,1.012,324,1.012,325,1.012,326,1.012,327,0.816,328,1.012,329,1.012,330,1.012,331,1.012]],["title/injectables/StompService.html",[24,0.674,94,0.34]],["body/injectables/StompService.html",[0,0.425,2,1.181,3,1.038,4,0.595,6,1.345,7,1.524,10,2.02,12,1.537,20,1.038,21,0.051,23,1.336,24,0.908,25,1.24,28,1.038,31,1.364,58,1.196,84,0.036,85,0.036,86,2.257,89,1.181,90,1.181,91,1.181,92,1.537,94,0.512,96,2.02,98,2.257,119,1.345,121,1.419,125,2.257,133,1.537,139,2.02,146,1.842,147,1.419,148,2.02,156,2.323,158,3.209,164,2.441,165,1.537,166,1.767,167,2.441,168,1.767,169,2.441,170,2.441,171,2.702,172,1.767,173,2.441,174,2.055,175,2.441,241,1.345,276,2.441,327,2.441,332,2.441,333,3.98,334,3.027,335,3.98,336,2.02,337,3.027,338,3.027,339,2.055,340,3.027,341,3.027]],["title/changelog.html",[198,1.473,342,1.714,343,1.714]],["body/changelog.html",[3,0.896,4,0.514,19,1.525,21,0.041,24,0.596,25,0.686,26,1.161,38,0.896,43,1.83,44,1.414,58,0.785,61,1.161,69,1.406,84,0.033,85,0.033,91,1.406,94,0.301,98,1.83,100,1.406,103,2.107,104,1.525,106,1.327,109,1.161,112,2.801,120,2.107,121,0.785,123,1.61,134,1.525,138,1.327,146,1.019,147,1.083,165,1.327,176,1.61,178,1.525,180,1.525,216,1.327,224,1.774,225,1.525,230,2.107,241,1.833,253,2.906,316,2.107,336,1.327,343,1.774,344,2.613,345,2.613,346,3.587,347,2.613,348,2.613,349,2.107,350,2.613,351,2.447,352,2.613,353,2.613,354,3.604,355,2.613,356,2.107,357,2.107,358,2.613,359,2.613,360,2.596,361,2.613,362,2.613,363,2.613,364,2.613,365,2.613,366,3.02,367,2.107,368,3.327,369,2.107,370,3.604,371,2.107,372,2.107,373,2.613,374,3.763,375,2.906,376,2.613,377,2.613,378,2.906,379,2.613,380,2.447,381,2.107,382,2.906,383,3.587,384,2.107,385,1.774,386,2.613,387,2.906,388,3.604,389,1.774,390,2.107,391,2.613,392,2.613,393,2.613,394,2.613,395,2.613,396,2.613,397,2.613,398,2.107,399,1.774,400,2.613,401,2.613,402,2.107,403,2.613,404,2.447,405,1.774,406,2.447,407,1.774,408,2.613,409,1.774,410,2.613,411,1.525,412,2.107,413,2.613,414,2.613,415,2.613,416,2.613,417,2.107,418,1.525,419,2.613,420,2.107,421,2.613,422,2.107,423,2.613,424,2.107,425,2.906,426,2.613,427,2.107,428,2.613,429,2.613,430,2.613,431,2.107,432,2.613,433,2.613,434,2.613,435,2.107,436,1.327,437,2.613,438,2.107,439,2.613,440,2.107,441,2.107]],["title/coverage.html",[442,3.156]],["body/coverage.html",[0,0.568,1,1.812,4,0.61,5,2.887,7,1.064,21,0.051,24,0.708,25,0.815,29,1.978,30,1.576,35,1.812,36,1.38,55,2.373,77,1.812,84,0.037,85,0.037,91,1.211,94,0.569,95,2.504,123,1.211,135,2.108,136,2.285,137,2.504,143,1.812,144,2.504,155,2.504,332,2.504,442,2.504,443,3.104,444,3.104,445,2.504,446,3.238,447,3.263,448,5.341,449,2.504,450,3.629,451,2.504,452,2.504,453,2.504,454,3.104,455,3.104,456,3.104,457,3.104,458,2.504,459,3.104,460,3.104,461,4.769,462,4.046,463,3.104,464,3.104,465,3.263,466,2.504,467,2.108,468,3.104,469,3.104]],["title/dependencies.html",[176,1.373,357,2.036]],["body/dependencies.html",[21,0.047,84,0.045,85,0.045,121,1.286,142,2.497,176,1.669,470,4.278,471,4.278]],["title/miscellaneous/enumerations.html",[472,1.122,473,2.838]],["body/miscellaneous/enumerations.html",[8,1.412,14,2.405,21,0.044,84,0.044,85,0.044,100,1.607,121,1.238,136,2.091,146,1.607,177,3.322,178,2.405,275,3.887,411,2.405,472,1.831,473,3.322,474,4.12,475,4.82,476,3.322]],["title/miscellaneous/functions.html",[29,1.373,472,1.122]],["body/miscellaneous/functions.html",[5,2.088,8,1.226,21,0.05,24,1.097,29,1.396,30,2.441,35,2.806,79,2.429,82,2.429,84,0.04,85,0.04,89,1.96,90,1.96,92,2.55,450,2.885,451,3.57,452,3.57,453,3.57,458,3.57,472,1.59,477,4.807,478,4.807,479,5.023,480,3.577,481,5.26,482,3.577,483,3.577]],["title/index.html",[8,0.865,198,1.473,342,1.714]],["body/index.html",[0,0.427,4,0.598,7,1.042,9,1.046,10,0.636,14,0.731,15,1.046,16,1.046,20,0.706,21,0.049,23,0.789,24,0.911,25,1.048,26,1.166,31,1.459,33,0.636,38,0.429,39,0.731,43,0.636,44,1.042,45,1.606,46,0.636,47,1.046,48,1.046,49,0.636,50,1.203,51,0.636,52,0.636,53,1.046,54,1.352,55,1.352,56,1.333,57,0.636,58,1.2,59,0.636,60,1.046,61,0.557,62,0.916,63,0.636,64,1.046,65,0.557,66,0.557,67,0.557,68,1.046,69,0.489,70,0.636,72,0.731,73,0.731,74,0.731,75,0.636,76,0.636,78,1.399,84,0.019,85,0.019,86,0.636,90,0.804,94,0.35,98,2.027,100,1.557,104,1.203,106,2.027,109,0.557,111,1.399,112,1.782,119,0.916,121,1.243,122,1.544,123,1.187,124,1.775,125,1.046,126,0.636,128,1.782,134,1.532,139,1.333,146,0.804,147,1.28,148,1.94,156,1.203,159,2.23,163,1.01,165,1.707,166,1.962,168,1.203,171,1.782,172,1.532,176,1.187,178,0.731,179,1.662,180,1.203,190,1.01,193,0.85,195,1.01,196,1.01,201,1.01,204,2.23,205,0.85,215,0.85,216,1.046,218,1.01,219,0.85,224,0.85,225,0.731,227,1.01,231,2.453,238,1.01,241,1.352,242,0.85,251,2.71,252,1.01,254,1.01,272,1.01,273,1.01,294,1.203,336,2.099,339,1.399,343,0.85,346,1.01,349,1.01,351,1.399,360,1.775,366,3.025,367,2.453,368,2.453,369,1.01,371,2.117,372,1.662,374,1.662,378,1.01,380,1.399,381,1.01,382,1.01,383,1.01,385,0.85,389,2.71,390,3.219,399,1.399,402,1.662,404,3.025,405,2.065,406,3.08,407,0.85,409,0.85,411,1.532,412,1.662,418,0.731,422,2.453,425,1.01,431,1.01,436,0.636,438,1.01,441,2.117,476,1.662,484,2.625,485,2.625,486,1.252,487,1.252,488,1.252,489,1.252,490,1.01,491,2.06,492,1.252,493,1.662,494,2.625,495,1.252,496,1.252,497,1.252,498,1.252,499,1.252,500,1.252,501,1.252,502,1.252,503,2.065,504,1.252,505,2.06,506,1.252,507,2.06,508,1.252,509,2.06,510,1.252,511,2.06,512,2.06,513,1.252,514,1.252,515,2.06,516,1.252,517,1.252,518,1.01,519,1.252,520,1.252,521,1.252,522,1.252,523,1.252,524,1.252,525,1.252,526,2.06,527,1.662,528,1.252,529,1.252,530,1.252,531,1.252,532,1.01,533,2.065,534,1.252,535,1.662,536,1.252,537,1.252,538,2.06,539,0.85,540,1.252,541,1.252,542,1.252,543,4.135,544,1.252,545,1.252,546,1.252,547,2.625,548,2.06,549,1.662,550,1.252,551,1.252,552,1.252,553,1.252,554,2.282,555,2.06,556,1.252,557,1.252,558,1.252,559,1.252,560,1.252,561,1.252,562,1.252,563,1.252,564,1.252,565,1.252,566,2.625,567,1.01,568,1.252,569,1.01,570,0.85,571,1.01,572,1.252,573,1.252,574,1.01,575,1.252,576,1.252,577,1.252,578,1.252,579,2.06,580,1.252,581,1.252,582,1.252,583,1.252,584,1.252,585,1.252,586,1.252,587,1.252,588,1.252,589,1.252,590,2.06,591,1.252,592,2.06,593,1.252,594,1.01,595,1.252,596,1.252,597,1.252,598,1.252,599,1.01,600,1.252,601,1.662,602,1.01,603,1.252,604,1.252,605,1.252,606,1.252,607,2.06,608,1.252,609,2.06,610,2.06,611,1.252,612,2.06,613,1.252,614,1.252,615,1.252,616,1.252,617,1.252,618,1.252,619,1.252,620,1.252,621,0.85,622,1.252,623,2.06,624,1.252,625,1.01,626,1.252,627,1.046,628,1.01,629,1.252,630,1.252,631,1.252,632,1.252,633,1.252,634,1.252,635,1.252,636,1.252,637,1.252,638,1.252,639,1.01,640,1.252,641,1.252,642,1.252,643,1.252,644,1.252,645,1.252,646,1.252,647,1.01,648,1.01,649,1.252,650,1.252,651,1.252,652,1.252,653,1.252,654,1.01,655,0.85,656,1.01]],["title/license.html",[198,1.473,342,1.714,655,1.714]],["body/license.html",[4,0.645,21,0.038,41,1.914,84,0.038,85,0.038,100,1.279,123,1.279,147,1.26,180,1.914,240,2.227,251,2.227,255,2.645,259,2.645,417,2.645,424,2.645,503,2.227,569,2.645,570,3.305,571,2.645,647,2.645,648,2.645,655,2.227,656,2.645,657,4.62,658,3.279,659,3.279,660,4.191,661,3.279,662,3.279,663,3.279,664,4.191,665,3.279,666,5.348,667,3.279,668,4.191,669,4.62,670,3.279,671,4.62,672,3.38,673,3.279,674,3.279,675,3.279,676,3.279,677,3.279,678,3.279,679,3.279,680,4.191,681,4.191,682,3.279,683,3.279,684,4.191,685,3.279,686,3.279,687,3.279,688,3.279,689,3.279,690,3.279,691,3.279,692,3.279,693,3.279,694,3.279,695,3.279,696,3.279,697,3.279,698,3.279,699,3.279,700,3.279,701,3.279,702,3.279,703,3.279,704,3.279]],["title/modules.html",[705,2.657]],["body/modules.html",[21,0.045,84,0.045,85,0.045,705,2.957]],["title/overview.html",[706,3.156]],["body/overview.html",[0,0.603,21,0.045,69,1.675,84,0.045,85,0.045,94,0.494,706,3.462,707,4.293]],["title/miscellaneous/variables.html",[446,2.389,472,1.122]],["body/miscellaneous/variables.html",[8,1.263,21,0.051,58,1.464,76,2.289,84,0.041,85,0.041,91,1.901,99,3.446,126,2.473,445,2.972,446,2.502,447,4.272,449,2.972,465,2.972,466,3.928,467,3.307,472,1.637,708,4.508,709,3.685,710,3.685,711,3.685,712,3.685,713,4.508,714,3.685]],["title/additional-documentation/sock-js.html",[398,1.778,436,1.119,627,1.119,715,2.205]],["body/additional-documentation/sock-js.html",[0,0.337,15,1.217,16,2.175,20,1.163,21,0.05,23,0.721,25,1.125,26,2.369,27,1.508,28,0.822,29,1.671,30,2.175,31,0.822,33,2.175,36,1.065,37,1.4,38,0.822,43,1.723,44,1.163,45,2.009,46,1.217,47,1.723,48,1.723,49,1.217,50,1.981,51,1.217,52,1.217,53,1.723,54,1.508,55,1.904,56,2,57,1.217,58,1.184,59,1.217,60,1.723,61,1.065,62,1.508,63,1.217,64,1.217,65,1.065,66,1.508,67,1.508,68,1.723,69,0.935,70,1.217,72,1.4,73,1.4,74,1.4,75,1.217,76,1.217,84,0.031,85,0.031,89,0.935,90,0.935,99,1.628,100,0.935,109,1.508,119,1.508,122,1.217,125,1.217,126,1.217,131,1.628,132,1.934,145,1.628,147,1.359,159,1.981,168,2.5,205,1.628,213,1.628,215,2.304,216,1.217,220,1.628,241,1.065,242,1.628,294,1.4,299,1.934,300,1.934,336,1.217,351,1.628,360,2.639,380,1.628,384,1.934,385,1.628,389,2.304,399,2.304,404,1.628,405,1.628,406,1.628,407,1.628,411,1.4,418,1.4,427,1.934,533,2.304,539,2.304,549,1.934,554,2.304,570,1.628,602,1.934,621,1.628,672,2.737,716,2.398,717,2.398,718,2.398,719,1.628,720,2.398,721,2.398,722,2.398,723,2.398,724,3.394,725,3.394,726,3.394,727,2.398,728,2.398,729,2.398,730,1.934,731,2.398,732,2.398,733,2.398,734,2.398,735,2.737,736,1.934,737,1.934,738,2.398,739,3.394,740,3.394,741,2.398,742,1.934,743,2.398,744,3.394,745,2.398,746,2.398]],["title/additional-documentation/rpc---remote-procedure-call.html",[138,0.893,152,1.195,153,1.195,204,1.027,436,0.893,627,0.893]],["body/additional-documentation/rpc---remote-procedure-call.html",[0,0.298,7,1.261,9,1.078,20,0.728,21,0.05,24,0.709,27,1.799,31,0.728,38,1.065,41,1.239,44,1.261,62,0.943,84,0.028,85,0.034,86,1.078,89,0.828,90,1.213,92,1.578,94,0.244,106,1.078,109,1.381,111,2.497,122,2.056,123,0.828,124,1.239,127,1.712,131,2.111,138,1.578,139,1.078,143,1.815,145,2.111,146,0.828,147,1.296,148,2.286,152,1.441,153,1.441,156,1.239,159,2.516,165,1.078,166,2.516,172,1.239,174,2.111,176,1.58,193,1.441,194,1.712,204,1.815,213,2.111,216,2.056,219,3.058,220,2.497,225,1.815,241,0.943,245,1.712,256,3.925,294,2.785,336,1.078,339,1.441,356,2.507,360,1.239,366,2.111,375,2.507,387,2.507,409,1.441,440,1.712,467,1.441,490,1.712,493,2.507,503,1.441,518,1.712,532,2.507,539,1.441,554,1.441,567,1.712,574,1.712,594,1.712,599,1.712,601,1.712,621,1.441,625,1.712,627,1.578,628,1.712,639,1.712,654,1.712,705,1.441,719,1.441,730,1.712,735,2.507,736,1.712,737,1.712,747,2.123,748,2.123,749,2.123,750,2.123,751,3.678,752,2.123,753,4.049,754,2.123,755,4.049,756,4.31,757,3.678,758,2.123,759,2.123,760,2.123,761,2.123,762,2.123,763,2.123,764,2.123,765,3.109,766,3.109,767,3.109,768,2.123,769,3.678,770,2.123,771,3.109,772,2.123,773,3.109,774,2.123,775,2.123,776,3.109,777,3.109,778,2.123,779,2.123,780,3.109,781,2.123,782,2.123,783,2.123,784,2.123,785,2.123,786,2.123,787,3.109,788,2.123,789,3.109,790,2.123,791,2.123,792,2.123,793,2.123,794,2.123,795,2.123,796,2.123,797,2.123,798,2.123,799,2.123,800,2.123,801,2.123,802,2.123,803,2.123,804,3.109,805,2.123,806,2.123,807,2.123,808,2.123,809,2.123,810,2.123,811,2.123,812,2.123,813,2.123,814,3.109,815,2.123,816,2.123,817,2.123,818,2.123,819,2.123,820,2.123,821,2.123,822,2.123]],["title/additional-documentation/contributing.html",[436,1.282,627,1.282,823,2.036]],["body/additional-documentation/contributing.html",[4,0.783,21,0.049,84,0.043,85,0.043,123,1.555,128,3.209,147,1.198,176,1.555,240,2.706,418,2.941,420,3.214,435,3.214,527,3.214,533,2.706,535,3.214,719,2.706,742,3.214,823,3.214,824,3.985,825,3.985,826,3.985,827,4.726]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}}}],["0",{"_index":55,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"coverage.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["0.1.0",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["0.3.4",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["0.3.5",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["0.3.8",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["0.4.0",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["0.4.2",{"_index":403,"title":{},"body":{"changelog.html":{}}}],["0.4.3",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["0.6.0",{"_index":394,"title":{},"body":{"changelog.html":{}}}],["0.6.1",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["0.6.2",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["0.6.3",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["0.6.4",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["0/1",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["07",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":347,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":707,"title":{},"body":{"overview.html":{}}}],["2.4.0",{"_index":528,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":464,"title":{},"body":{"coverage.html":{}}}],["2/4/5",{"_index":371,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["20",{"_index":61,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["200",{"_index":71,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["20000",{"_index":60,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["2017",{"_index":659,"title":{},"body":{"license.html":{}}}],["2018",{"_index":346,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["23",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":355,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["33",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":509,"title":{},"body":{"index.html":{}}}],["4.0.1",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["4.0.2",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["4.x.x",{"_index":372,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["5",{"_index":69,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"changelog.html":{},"index.html":{},"overview.html":{},"additional-documentation/sock-js.html":{}}}],["5.0.0",{"_index":529,"title":{},"body":{"index.html":{}}}],["50",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["5000",{"_index":68,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["6",{"_index":367,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["6.0.0",{"_index":508,"title":{},"body":{"index.html":{}}}],["6.0.1",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["6.1.0.beta.3",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["6.1.0.beta.4",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["6.x.x",{"_index":369,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["6/7",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["7.0.0",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["7/7",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["85",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["_conf",{"_index":79,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"miscellaneous/functions.html":{}}}],["_mapstompstate(st",{"_index":279,"title":{},"body":{"injectables/StompRService.html":{}}}],["_stompservic",{"_index":579,"title":{},"body":{"index.html":{}}}],["abil",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":41,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"license.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["accept",{"_index":792,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["access",{"_index":806,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["accessor",{"_index":181,"title":{},"body":{"injectables/StompRService.html":{}}}],["ack",{"_index":210,"title":{},"body":{"injectables/StompRService.html":{}}}],["action",{"_index":700,"title":{},"body":{"license.html":{}}}],["activ",{"_index":558,"title":{},"body":{"index.html":{}}}],["actual",{"_index":494,"title":{},"body":{"index.html":{}}}],["ad",{"_index":387,"title":{},"body":{"changelog.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["add",{"_index":536,"title":{},"body":{"index.html":{}}}],["addit",{"_index":627,"title":{"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["addition",{"_index":254,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["adjust",{"_index":743,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["advanc",{"_index":162,"title":{},"body":{"injectables/StompRService.html":{}}}],["affect",{"_index":746,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["ajax",{"_index":797,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["allow",{"_index":384,"title":{},"body":{"changelog.html":{},"additional-documentation/sock-js.html":{}}}],["alreadi",{"_index":245,"title":{},"body":{"injectables/StompRService.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["altern",{"_index":130,"title":{},"body":{"injectables/StompConfig.html":{}}}],["alway",{"_index":247,"title":{},"body":{"injectables/StompRService.html":{}}}],["and/or",{"_index":675,"title":{},"body":{"license.html":{}}}],["anguar",{"_index":496,"title":{},"body":{"index.html":{}}}],["angular",{"_index":366,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["angular/cor",{"_index":133,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["angular2",{"_index":156,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["angular4",{"_index":485,"title":{},"body":{"index.html":{}}}],["angular5",{"_index":486,"title":{},"body":{"index.html":{}}}],["angular6",{"_index":487,"title":{},"body":{"index.html":{}}}],["anoth",{"_index":799,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["apart",{"_index":820,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["api",{"_index":441,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["app_initi",{"_index":412,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["appli",{"_index":515,"title":{},"body":{"index.html":{}}}],["applic",{"_index":716,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["appreci",{"_index":433,"title":{},"body":{"changelog.html":{}}}],["approach",{"_index":762,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["argument",{"_index":789,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["aris",{"_index":704,"title":{},"body":{"license.html":{}}}],["around",{"_index":745,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["assign",{"_index":629,"title":{},"body":{"index.html":{}}}],["associ",{"_index":667,"title":{},"body":{"license.html":{}}}],["assum",{"_index":555,"title":{},"body":{"index.html":{}}}],["astha",{"_index":649,"title":{},"body":{"index.html":{}}}],["async",{"_index":588,"title":{},"body":{"index.html":{}}}],["asynchron",{"_index":173,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["attempt",{"_index":65,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["author",{"_index":693,"title":{},"body":{"license.html":{}}}],["auto",{"_index":66,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["automat",{"_index":208,"title":{},"body":{"injectables/StompRService.html":{}}}],["back",{"_index":753,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["backend",{"_index":765,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["background",{"_index":565,"title":{},"body":{"index.html":{}}}],["base",{"_index":349,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["be",{"_index":510,"title":{},"body":{"index.html":{}}}],["beat",{"_index":300,"title":{},"body":{"injectables/StompRService.html":{},"additional-documentation/sock-js.html":{}}}],["befor",{"_index":64,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["behaviorsubject",{"_index":227,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["behaviorsubject(stompstate.clos",{"_index":329,"title":{},"body":{"injectables/StompRService.html":{}}}],["believ",{"_index":783,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["below",{"_index":32,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["benefit",{"_index":577,"title":{},"body":{"index.html":{}}}],["beta.1",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["beta.2",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["bodi",{"_index":322,"title":{},"body":{"injectables/StompRService.html":{}}}],["boolean",{"_index":101,"title":{},"body":{"injectables/StompConfig.html":{}}}],["both",{"_index":511,"title":{},"body":{"index.html":{}}}],["branch",{"_index":507,"title":{},"body":{"index.html":{}}}],["break",{"_index":500,"title":{},"body":{"index.html":{}}}],["broken",{"_index":521,"title":{},"body":{"index.html":{}}}],["broker",{"_index":122,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["browser",{"_index":718,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["btw",{"_index":812,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["bundl",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["c",{"_index":658,"title":{},"body":{"license.html":{}}}],["call",{"_index":204,"title":{"additional-documentation/rpc---remote-procedure-call.html":{}},"body":{"injectables/StompRService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["call.html",{"_index":154,"title":{},"body":{"injectables/StompRPCService.html":{}}}],["callback",{"_index":316,"title":{},"body":{"injectables/StompRService.html":{},"changelog.html":{}}}],["carri",{"_index":239,"title":{},"body":{"injectables/StompRService.html":{}}}],["case",{"_index":375,"title":{},"body":{"changelog.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["chang",{"_index":383,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["changelog",{"_index":343,"title":{"changelog.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["charalampidi",{"_index":646,"title":{},"body":{"index.html":{}}}],["charg",{"_index":663,"title":{},"body":{"license.html":{}}}],["check",{"_index":719,"title":{},"body":{"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}}}],["claim",{"_index":696,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["cli",{"_index":526,"title":{},"body":{"index.html":{}}}],["client",{"_index":27,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["client';impl",{"_index":728,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["close",{"_index":14,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["code",{"_index":554,"title":{},"body":{"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["cofig",{"_index":632,"title":{},"body":{"index.html":{}}}],["come",{"_index":598,"title":{},"body":{"index.html":{}}}],["comment",{"_index":40,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["commun",{"_index":737,"title":{},"body":{"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["compat",{"_index":351,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["compil",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["complet",{"_index":734,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["compliant",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["compodoc",{"_index":381,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compon",{"_index":578,"title":{},"body":{"index.html":{}}}],["comput",{"_index":775,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["concept",{"_index":807,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["condit",{"_index":679,"title":{},"body":{"license.html":{}}}],["config",{"_index":139,"title":{},"body":{"injectables/StompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["config(config",{"_index":293,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.debug",{"_index":307,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.head",{"_index":313,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.heartbeat_in",{"_index":302,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.heartbeat_out",{"_index":304,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.reconnect_delay",{"_index":306,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.url",{"_index":297,"title":{},"body":{"injectables/StompRService.html":{}}}],["configur",{"_index":98,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"index.html":{}}}],["connect",{"_index":100,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"additional-documentation/sock-js.html":{}}}],["connectobserv",{"_index":182,"title":{},"body":{"injectables/StompRService.html":{}}}],["consol",{"_index":74,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["console.log(`receiv",{"_index":596,"title":{},"body":{"index.html":{}}}],["console.log(`stomp",{"_index":618,"title":{},"body":{"index.html":{}}}],["console.log(message.bodi",{"_index":796,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["console.log(new",{"_index":310,"title":{},"body":{"injectables/StompRService.html":{}}}],["const",{"_index":294,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["constructor",{"_index":86,"title":{},"body":{"classes/MyStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["constructor(_conf",{"_index":87,"title":{},"body":{"classes/MyStompService.html":{}}}],["constructor(config",{"_index":333,"title":{},"body":{"injectables/StompService.html":{}}}],["constructor(priv",{"_index":78,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"index.html":{}}}],["consum",{"_index":599,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["context",{"_index":466,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":701,"title":{},"body":{"license.html":{}}}],["contribut",{"_index":823,"title":{"additional-documentation/contributing.html":{}},"body":{"additional-documentation/contributing.html":{}}}],["contributor",{"_index":641,"title":{},"body":{"index.html":{}}}],["control",{"_index":626,"title":{},"body":{"index.html":{}}}],["convent",{"_index":747,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["convert",{"_index":607,"title":{},"body":{"index.html":{}}}],["copi",{"_index":570,"title":{},"body":{"index.html":{},"license.html":{},"additional-documentation/sock-js.html":{}}}],["copyright",{"_index":657,"title":{},"body":{"license.html":{}}}],["correct",{"_index":356,"title":{},"body":{"changelog.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["correctli",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["correl",{"_index":755,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["correlationid",{"_index":773,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["correspond",{"_index":613,"title":{},"body":{"index.html":{}}}],["coverag",{"_index":442,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creat",{"_index":220,"title":{},"body":{"injectables/StompRService.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["critic",{"_index":514,"title":{},"body":{"index.html":{}}}],["curiou",{"_index":637,"title":{},"body":{"index.html":{}}}],["current",{"_index":230,"title":{},"body":{"injectables/StompRService.html":{},"changelog.html":{}}}],["custom",{"_index":819,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["damag",{"_index":697,"title":{},"body":{"license.html":{}}}],["date",{"_index":311,"title":{},"body":{"injectables/StompRService.html":{}}}],["deal",{"_index":668,"title":{},"body":{"license.html":{}}}],["debug",{"_index":75,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["deep",{"_index":650,"title":{},"body":{"index.html":{}}}],["deepak",{"_index":647,"title":{},"body":{"index.html":{},"license.html":{}}}],["default",{"_index":126,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/sock-js.html":{}}}],["defaultconfig",{"_index":35,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["defaultmessagesobserv",{"_index":184,"title":{},"body":{"injectables/StompRService.html":{}}}],["defin",{"_index":12,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["delay",{"_index":402,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["demo",{"_index":543,"title":{},"body":{"index.html":{}}}],["demo/blob/master/src/app/app.module.t",{"_index":566,"title":{},"body":{"index.html":{}}}],["demo/tree/sockj",{"_index":407,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["demonstr",{"_index":546,"title":{},"body":{"index.html":{}}}],["depend",{"_index":176,"title":{"dependencies.html":{}},"body":{"injectables/StompRService.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}}}],["deriv",{"_index":790,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["descript",{"_index":96,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["design",{"_index":226,"title":{},"body":{"injectables/StompRService.html":{}}}],["destin",{"_index":194,"title":{},"body":{"injectables/StompRService.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["detail",{"_index":124,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRPCService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["develop",{"_index":742,"title":{},"body":{"additional-documentation/sock-js.html":{},"additional-documentation/contributing.html":{}}}],["diagnost",{"_index":73,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["dimitri",{"_index":645,"title":{},"body":{"index.html":{}}}],["directli",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["disabl",{"_index":56,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["disconnect",{"_index":178,"title":{},"body":{"injectables/StompRService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["disconnetstomprandensur",{"_index":451,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["disconnetstomprandensure(stompservic",{"_index":480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["distribut",{"_index":417,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["docto",{"_index":826,"title":{},"body":{"additional-documentation/contributing.html":{}}}],["document",{"_index":123,"title":{},"body":{"injectables/StompConfig.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}}}],["documentation/rpc",{"_index":151,"title":{},"body":{"injectables/StompRPCService.html":{}}}],["documentation/sock",{"_index":551,"title":{},"body":{"index.html":{}}}],["don't",{"_index":730,"title":{},"body":{"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["done",{"_index":481,"title":{},"body":{"miscellaneous/functions.html":{}}}],["drop",{"_index":206,"title":{},"body":{"injectables/StompRService.html":{}}}],["due",{"_index":18,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["dure",{"_index":223,"title":{},"body":{"injectables/StompRService.html":{}}}],["echo",{"_index":778,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["emit",{"_index":229,"title":{},"body":{"injectables/StompRService.html":{}}}],["emul",{"_index":733,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["enabl",{"_index":103,"title":{},"body":{"injectables/StompConfig.html":{},"changelog.html":{}}}],["end",{"_index":234,"title":{},"body":{"injectables/StompRService.html":{}}}],["endpoint",{"_index":763,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["ensurestompconnect",{"_index":452,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ensurestompconnected(stompservic",{"_index":482,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ensurestomprdisconnect",{"_index":453,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ensurestomprdisconnected(stompservic",{"_index":483,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enum",{"_index":612,"title":{},"body":{"index.html":{}}}],["enumer",{"_index":473,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":447,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":785,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["error",{"_index":19,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompRService.html":{},"changelog.html":{}}}],["errorsubject",{"_index":186,"title":{},"body":{"injectables/StompRService.html":{}}}],["es6",{"_index":170,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["establish",{"_index":238,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["etc",{"_index":586,"title":{},"body":{"index.html":{}}}],["even",{"_index":205,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["event",{"_index":255,"title":{},"body":{"injectables/StompRService.html":{},"license.html":{}}}],["everyon",{"_index":653,"title":{},"body":{"index.html":{}}}],["exactli",{"_index":517,"title":{},"body":{"index.html":{}}}],["exampl",{"_index":125,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["expect",{"_index":787,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["explicitli",{"_index":211,"title":{},"body":{"injectables/StompRService.html":{}}}],["export",{"_index":28,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"additional-documentation/sock-js.html":{}}}],["express",{"_index":686,"title":{},"body":{"license.html":{}}}],["extend",{"_index":6,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["extens",{"_index":498,"title":{},"body":{"index.html":{}}}],["fail",{"_index":740,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["fals",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feel",{"_index":568,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":547,"title":{},"body":{"index.html":{}}}],["few",{"_index":628,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["field",{"_index":209,"title":{},"body":{"injectables/StompRService.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{},"additional-documentation/contributing.html":{}}}],["filter",{"_index":585,"title":{},"body":{"index.html":{}}}],["find",{"_index":520,"title":{},"body":{"index.html":{}}}],["finnigan",{"_index":643,"title":{},"body":{"index.html":{}}}],["fit",{"_index":689,"title":{},"body":{"license.html":{}}}],["fix",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":503,"title":{},"body":{"index.html":{},"license.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["forcedisconnect",{"_index":11,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["form",{"_index":722,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["format",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["forward",{"_index":502,"title":{},"body":{"index.html":{}}}],["frame",{"_index":253,"title":{},"body":{"injectables/StompRService.html":{},"changelog.html":{}}}],["free",{"_index":569,"title":{},"body":{"index.html":{},"license.html":{}}}],["frequent",{"_index":732,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["function",{"_index":29,"title":{"miscellaneous/functions.html":{}},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/sock-js.html":{}}}],["furnish",{"_index":678,"title":{},"body":{"license.html":{}}}],["futur",{"_index":427,"title":{},"body":{"changelog.html":{},"additional-documentation/sock-js.html":{}}}],["gener",{"_index":527,"title":{},"body":{"index.html":{},"additional-documentation/contributing.html":{}}}],["get",{"_index":198,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"injectables/StompRService.html":{}}}],["getclient",{"_index":267,"title":{},"body":{"injectables/StompRService.html":{}}}],["getconnectobserv",{"_index":235,"title":{},"body":{"injectables/StompRService.html":{}}}],["getdefaultmessagesobserv",{"_index":257,"title":{},"body":{"injectables/StompRService.html":{}}}],["geterrorsubject",{"_index":263,"title":{},"body":{"injectables/StompRService.html":{}}}],["getreceiptsobserv",{"_index":260,"title":{},"body":{"injectables/StompRService.html":{}}}],["getserverheadersobserv",{"_index":249,"title":{},"body":{"injectables/StompRService.html":{}}}],["github",{"_index":435,"title":{},"body":{"changelog.html":{},"additional-documentation/contributing.html":{}}}],["give",{"_index":809,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["go",{"_index":501,"title":{},"body":{"index.html":{}}}],["grant",{"_index":662,"title":{},"body":{"license.html":{}}}],["guest",{"_index":50,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["guid",{"_index":140,"title":{},"body":{"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{}}}],["guide](../addit",{"_index":150,"title":{},"body":{"injectables/StompRPCService.html":{}}}],["hack",{"_index":741,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["handl",{"_index":164,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["hard",{"_index":491,"title":{},"body":{"index.html":{}}}],["hash",{"_index":567,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["head",{"_index":524,"title":{},"body":{"index.html":{}}}],["header",{"_index":44,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["heart",{"_index":299,"title":{},"body":{"injectables/StompRService.html":{},"additional-documentation/sock-js.html":{}}}],["heartbeat",{"_index":51,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["heartbeat_in",{"_index":57,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["heartbeat_out",{"_index":59,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["hello",{"_index":791,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["help",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["here",{"_index":770,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["herebi",{"_index":661,"title":{},"body":{"license.html":{}}}],["holder",{"_index":694,"title":{},"body":{"license.html":{}}}],["host",{"_index":49,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["host:str",{"_index":107,"title":{},"body":{"injectables/StompConfig.html":{}}}],["http",{"_index":548,"title":{},"body":{"index.html":{}}}],["https://angular.io/docs/ts/latest/guide/depend",{"_index":563,"title":{},"body":{"index.html":{}}}],["https://en.wikipedia.org/wiki/websocket",{"_index":720,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["https://github.com/stomp",{"_index":404,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["https://stomp",{"_index":389,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["https://www.rabbitmq.com/stomp.html",{"_index":582,"title":{},"body":{"index.html":{}}}],["https://www.rabbitmq.com/stomp.html#d.tqd",{"_index":784,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["https://www.rabbitmq.com/tutorials/tutori",{"_index":758,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["https://www.rabbitmq.com/web",{"_index":559,"title":{},"body":{"index.html":{}}}],["i.",{"_index":749,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["id",{"_index":756,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["ideal",{"_index":803,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["identifi",{"_index":443,"title":{},"body":{"coverage.html":{}}}],["ignor",{"_index":246,"title":{},"body":{"injectables/StompRService.html":{}}}],["immedi",{"_index":232,"title":{},"body":{"injectables/StompRService.html":{}}}],["implement",{"_index":145,"title":{},"body":{"injectables/StompRPCService.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["impli",{"_index":687,"title":{},"body":{"license.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["improv",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["includ",{"_index":671,"title":{},"body":{"license.html":{}}}],["incom",{"_index":114,"title":{},"body":{"injectables/StompConfig.html":{}}}],["incomingmessag",{"_index":776,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["inconsist",{"_index":523,"title":{},"body":{"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indic",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["inform",{"_index":721,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["initandconnect",{"_index":179,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["initi",{"_index":241,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["initstomp",{"_index":631,"title":{},"body":{"index.html":{}}}],["inject",{"_index":94,"title":{"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}},"body":{"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"overview.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["injection.html",{"_index":564,"title":{},"body":{"index.html":{}}}],["instal",{"_index":533,"title":{},"body":{"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/contributing.html":{}}}],["installor",{"_index":824,"title":{},"body":{"additional-documentation/contributing.html":{}}}],["instanc",{"_index":132,"title":{},"body":{"injectables/StompConfig.html":{},"additional-documentation/sock-js.html":{}}}],["instead",{"_index":385,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["interest",{"_index":619,"title":{},"body":{"index.html":{}}}],["intern",{"_index":602,"title":{},"body":{"index.html":{},"additional-documentation/sock-js.html":{}}}],["interv",{"_index":52,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["involv",{"_index":654,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["ionic",{"_index":531,"title":{},"body":{"index.html":{}}}],["issu",{"_index":224,"title":{},"body":{"injectables/StompRService.html":{},"changelog.html":{},"index.html":{}}}],["jimi",{"_index":644,"title":{},"body":{"index.html":{}}}],["js",{"_index":398,"title":{"additional-documentation/sock-js.html":{}},"body":{"changelog.html":{}}}],["js.github.io/ng2",{"_index":390,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["js.github.io/stomp",{"_index":724,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["js.html",{"_index":552,"title":{},"body":{"index.html":{}}}],["js/ng2",{"_index":422,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["js/ng4",{"_index":405,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["js/ng5",{"_index":545,"title":{},"body":{"index.html":{}}}],["js/ng6",{"_index":544,"title":{},"body":{"index.html":{}}}],["js/stomp",{"_index":538,"title":{},"body":{"index.html":{}}}],["json",{"_index":606,"title":{},"body":{"index.html":{}}}],["json.stringifi",{"_index":608,"title":{},"body":{"index.html":{}}}],["jump",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["karma",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":46,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["kind",{"_index":685,"title":{},"body":{"license.html":{}}}],["kumar",{"_index":648,"title":{},"body":{"index.html":{},"license.html":{}}}],["languag",{"_index":764,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["leav",{"_index":214,"title":{},"body":{"injectables/StompRService.html":{}}}],["liabil",{"_index":698,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":695,"title":{},"body":{"license.html":{}}}],["librari",{"_index":168,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["licens",{"_index":655,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":672,"title":{},"body":{"license.html":{},"additional-documentation/sock-js.html":{}}}],["link",{"_index":522,"title":{},"body":{"index.html":{}}}],["lint",{"_index":827,"title":{},"body":{"additional-documentation/contributing.html":{}}}],["list",{"_index":160,"title":{},"body":{"injectables/StompRService.html":{}}}],["local",{"_index":195,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["localhost",{"_index":129,"title":{},"body":{"injectables/StompConfig.html":{}}}],["log",{"_index":72,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["login",{"_index":47,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["longer",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["look",{"_index":574,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["magic",{"_index":782,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["main",{"_index":425,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["maintain",{"_index":512,"title":{},"body":{"index.html":{}}}],["make",{"_index":409,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["manag",{"_index":505,"title":{},"body":{"index.html":{}}}],["mani",{"_index":736,"title":{},"body":{"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["manual",{"_index":339,"title":{},"body":{"injectables/StompService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["map",{"_index":273,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["map((stat",{"_index":615,"title":{},"body":{"index.html":{}}}],["master",{"_index":506,"title":{},"body":{"index.html":{}}}],["match",{"_index":85,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}}}],["mean",{"_index":213,"title":{},"body":{"injectables/StompRService.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["merchant",{"_index":688,"title":{},"body":{"license.html":{}}}],["merg",{"_index":424,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["messag",{"_index":148,"title":{},"body":{"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["message');pleas",{"_index":605,"title":{},"body":{"index.html":{}}}],["message.bodi",{"_index":594,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["message.headers['correl",{"_index":774,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["message.headers['repli",{"_index":772,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["method",{"_index":9,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompRService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["michel",{"_index":651,"title":{},"body":{"index.html":{}}}],["millisecond",{"_index":53,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["miscellan",{"_index":472,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":222,"title":{},"body":{"injectables/StompRService.html":{}}}],["mit",{"_index":656,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":571,"title":{},"body":{"index.html":{},"license.html":{}}}],["modul",{"_index":705,"title":{"modules.html":{}},"body":{"modules.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["more",{"_index":638,"title":{},"body":{"index.html":{}}}],["msg_bodi",{"_index":597,"title":{},"body":{"index.html":{}}}],["mssage",{"_index":221,"title":{},"body":{"injectables/StompRService.html":{}}}],["multipl",{"_index":492,"title":{},"body":{"index.html":{}}}],["myserviceendpoint",{"_index":766,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["mystomprservic",{"_index":1,"title":{"classes/MyStompRService.html":{}},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"coverage.html":{}}}],["mystompservic",{"_index":77,"title":{"classes/MyStompService.html":{}},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"coverage.html":{}}}],["mystompservice(_conf",{"_index":83,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["name",{"_index":90,"title":{},"body":{"classes/MyStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["need",{"_index":159,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["neeed",{"_index":108,"title":{},"body":{"injectables/StompConfig.html":{}}}],["new",{"_index":36,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"coverage.html":{},"additional-documentation/sock-js.html":{}}}],["noninfring",{"_index":692,"title":{},"body":{"license.html":{}}}],["note",{"_index":215,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["notic",{"_index":680,"title":{},"body":{"license.html":{}}}],["now",{"_index":378,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["npm",{"_index":418,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/contributing.html":{}}}],["number",{"_index":112,"title":{},"body":{"injectables/StompConfig.html":{},"changelog.html":{},"index.html":{}}}],["object",{"_index":99,"title":{},"body":{"injectables/StompConfig.html":{},"miscellaneous/variables.html":{},"additional-documentation/sock-js.html":{}}}],["observ",{"_index":171,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{}}}],["obtain",{"_index":665,"title":{},"body":{"license.html":{}}}],["occasion",{"_index":739,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["occur",{"_index":244,"title":{},"body":{"injectables/StompRService.html":{}}}],["octob",{"_index":513,"title":{},"body":{"index.html":{}}}],["offer",{"_index":516,"title":{},"body":{"index.html":{}}}],["old",{"_index":717,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["on",{"_index":735,"title":{},"body":{"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["onc",{"_index":639,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["oper",{"_index":584,"title":{},"body":{"index.html":{}}}],["option",{"_index":92,"title":{},"body":{"classes/MyStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["otherwis",{"_index":703,"title":{},"body":{"license.html":{}}}],["out",{"_index":240,"title":{},"body":{"injectables/StompRService.html":{},"license.html":{},"additional-documentation/contributing.html":{}}}],["outgo",{"_index":116,"title":{},"body":{"injectables/StompConfig.html":{}}}],["outgoingmessag",{"_index":777,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["outlin",{"_index":810,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["overview",{"_index":706,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":357,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["page",{"_index":436,"title":{"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["param",{"_index":318,"title":{},"body":{"injectables/StompRService.html":{}}}],["paramet",{"_index":89,"title":{},"body":{"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["part",{"_index":440,"title":{},"body":{"changelog.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["particular",{"_index":690,"title":{},"body":{"license.html":{}}}],["pass",{"_index":109,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["passcod",{"_index":48,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["per",{"_index":611,"title":{},"body":{"index.html":{}}}],["permiss",{"_index":660,"title":{},"body":{"license.html":{}}}],["permit",{"_index":677,"title":{},"body":{"license.html":{}}}],["person",{"_index":664,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":589,"title":{},"body":{"index.html":{}}}],["pleas",{"_index":119,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["plugin",{"_index":557,"title":{},"body":{"index.html":{}}}],["portion",{"_index":683,"title":{},"body":{"license.html":{}}}],["possibl",{"_index":411,"title":{},"body":{"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["potenti",{"_index":640,"title":{},"body":{"index.html":{}}}],["prerequisit",{"_index":553,"title":{},"body":{"index.html":{}}}],["privat",{"_index":277,"title":{},"body":{"injectables/StompRService.html":{}}}],["procedur",{"_index":153,"title":{"additional-documentation/rpc---remote-procedure-call.html":{}},"body":{"injectables/StompRPCService.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["process",{"_index":625,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["product",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["program",{"_index":754,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["project",{"_index":431,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["promonet",{"_index":652,"title":{},"body":{"index.html":{}}}],["properti",{"_index":34,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{}}}],["provid",{"_index":251,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{},"license.html":{}}}],["public",{"_index":10,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{}}}],["publish",{"_index":180,"title":{},"body":{"injectables/StompRService.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["publish(queuenam",{"_index":190,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["publishparam",{"_index":191,"title":{},"body":{"injectables/StompRService.html":{}}}],["pubparam",{"_index":323,"title":{},"body":{"injectables/StompRService.html":{}}}],["purpos",{"_index":691,"title":{},"body":{"license.html":{}}}],["python.html",{"_index":760,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["queu",{"_index":196,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["queue",{"_index":166,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["queuenam",{"_index":199,"title":{},"body":{"injectables/StompRService.html":{}}}],["quit",{"_index":497,"title":{},"body":{"index.html":{}}}],["r.servic",{"_index":337,"title":{},"body":{"injectables/StompService.html":{}}}],["r.service.t",{"_index":155,"title":{},"body":{"injectables/StompRService.html":{},"coverage.html":{}}}],["r.service.ts:127",{"_index":189,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:138",{"_index":188,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:152",{"_index":192,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:178",{"_index":202,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:182",{"_index":268,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:184",{"_index":187,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:35",{"_index":228,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:58",{"_index":236,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:71",{"_index":250,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:78",{"_index":258,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:85",{"_index":261,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:93",{"_index":264,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:98",{"_index":266,"title":{},"body":{"injectables/StompRService.html":{}}}],["rabbitmq",{"_index":111,"title":{},"body":{"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["rais",{"_index":519,"title":{},"body":{"index.html":{}}}],["raw",{"_index":157,"title":{},"body":{"injectables/StompRService.html":{}}}],["re)connect",{"_index":243,"title":{},"body":{"injectables/StompRService.html":{}}}],["read",{"_index":549,"title":{},"body":{"index.html":{},"additional-documentation/sock-js.html":{}}}],["readi",{"_index":624,"title":{},"body":{"index.html":{}}}],["readm",{"_index":335,"title":{},"body":{"injectables/StompService.html":{}}}],["realli",{"_index":490,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["reap",{"_index":576,"title":{},"body":{"index.html":{}}}],["reason",{"_index":805,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["receipt",{"_index":262,"title":{},"body":{"injectables/StompRService.html":{}}}],["receiptsobserv",{"_index":185,"title":{},"body":{"injectables/StompRService.html":{}}}],["receiv",{"_index":801,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["recent",{"_index":252,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["reconnect",{"_index":67,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["reconnect_delay",{"_index":70,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["refer",{"_index":120,"title":{},"body":{"injectables/StompConfig.html":{},"changelog.html":{}}}],["releas",{"_index":399,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["remain",{"_index":822,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["remot",{"_index":152,"title":{"additional-documentation/rpc---remote-procedure-call.html":{}},"body":{"injectables/StompRPCService.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["repli",{"_index":751,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["replyqueuenam",{"_index":814,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["replyto",{"_index":771,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["report",{"_index":530,"title":{},"body":{"index.html":{}}}],["repositori",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["repres",{"_index":97,"title":{},"body":{"injectables/StompConfig.html":{}}}],["request",{"_index":219,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["request).subscribe((messag",{"_index":795,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["request/respons",{"_index":750,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["requir",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["require.context",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourc",{"_index":572,"title":{},"body":{"index.html":{}}}],["respons",{"_index":256,"title":{},"body":{"injectables/StompRService.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["restrict",{"_index":670,"title":{},"body":{"license.html":{}}}],["resubscrib",{"_index":207,"title":{},"body":{"injectables/StompRService.html":{}}}],["result",{"_index":84,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}}}],["return",{"_index":20,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["right",{"_index":673,"title":{},"body":{"license.html":{}}}],["rout",{"_index":752,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["rpc",{"_index":138,"title":{"additional-documentation/rpc---remote-procedure-call.html":{}},"body":{"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"changelog.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["rpc.config.t",{"_index":137,"title":{},"body":{"injectables/StompRPCConfig.html":{},"coverage.html":{}}}],["rpc.service.t",{"_index":144,"title":{},"body":{"injectables/StompRPCService.html":{},"coverage.html":{}}}],["run",{"_index":128,"title":{},"body":{"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/contributing.html":{}}}],["rxj",{"_index":272,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["rxjs/oper",{"_index":274,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstomp",{"_index":269,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig",{"_index":270,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.brokerurl",{"_index":296,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.connecthead",{"_index":312,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.debug",{"_index":308,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.heartbeatincom",{"_index":301,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.heartbeatoutgo",{"_index":303,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.reconnectdelay",{"_index":305,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.websocketfactori",{"_index":298,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstomprpc",{"_index":149,"title":{},"body":{"injectables/StompRPCService.html":{}}}],["rxstomprpcconfig",{"_index":141,"title":{},"body":{"injectables/StompRPCConfig.html":{}}}],["rxstompstat",{"_index":271,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompstate.clos",{"_index":284,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompstate.connect",{"_index":281,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompstate.open",{"_index":283,"title":{},"body":{"injectables/StompRService.html":{}}}],["safe",{"_index":203,"title":{},"body":{"injectables/StompRService.html":{}}}],["sam",{"_index":642,"title":{},"body":{"index.html":{}}}],["same",{"_index":493,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["sampl",{"_index":336,"title":{},"body":{"injectables/StompService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["saveimport",{"_index":727,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["saveor",{"_index":534,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":504,"title":{},"body":{"index.html":{}}}],["second",{"_index":62,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["secur",{"_index":804,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["see",{"_index":31,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["sell",{"_index":676,"title":{},"body":{"license.html":{}}}],["semant",{"_index":580,"title":{},"body":{"index.html":{}}}],["send",{"_index":193,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["sent",{"_index":769,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["server",{"_index":38,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["serverheadersobserv",{"_index":183,"title":{},"body":{"injectables/StompRService.html":{}}}],["servic",{"_index":146,"title":{},"body":{"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["set",{"_index":54,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["setconfig(config",{"_index":265,"title":{},"body":{"injectables/StompRService.html":{}}}],["setup",{"_index":127,"title":{},"body":{"injectables/StompConfig.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["setupreplyqueu",{"_index":817,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["sever",{"_index":562,"title":{},"body":{"index.html":{}}}],["shall",{"_index":681,"title":{},"body":{"license.html":{}}}],["show",{"_index":233,"title":{},"body":{"injectables/StompRService.html":{}}}],["similar",{"_index":131,"title":{},"body":{"injectables/StompConfig.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["simpl",{"_index":786,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["simpli",{"_index":816,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["simplifi",{"_index":808,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["simul",{"_index":17,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["singl",{"_index":802,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["six",{"_index":759,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["sock",{"_index":715,"title":{"additional-documentation/sock-js.html":{}},"body":{}}],["socketprovid",{"_index":30,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"additional-documentation/sock-js.html":{}}}],["sockj",{"_index":26,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["sockjs('http://127.0.0.1:15674/stomp",{"_index":37,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"additional-documentation/sock-js.html":{}}}],["softwar",{"_index":666,"title":{},"body":{"license.html":{}}}],["soon",{"_index":197,"title":{},"body":{"injectables/StompRService.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{}}}],["spec\\.t",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":518,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["specif",{"_index":172,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["specifi",{"_index":573,"title":{},"body":{"index.html":{}}}],["src/.../environment.prod.t",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.t",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helpers.t",{"_index":478,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../stomp",{"_index":474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../stomp.service.factory.t",{"_index":477,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../test.t",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/environments/environment.prod.t",{"_index":445,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.t",{"_index":449,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/sockjs.md.html",{"_index":726,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["src/specs/app/services/compatibility/helpers.t",{"_index":450,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/specs/app/services/compatibility/stomp.service.factory.t",{"_index":5,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/specs/app/services/compatibility/stomp.service.factory.ts:42",{"_index":88,"title":{},"body":{"classes/MyStompService.html":{}}}],["src/specs/app/services/compatibility/stomp.service.factory.ts:50",{"_index":93,"title":{},"body":{"classes/MyStompService.html":{}}}],["src/specs/app/services/compatibility/stomp.service.factory.ts:63",{"_index":13,"title":{},"body":{"classes/MyStompRService.html":{}}}],["src/stomp",{"_index":136,"title":{},"body":{"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/stomp.config.t",{"_index":95,"title":{},"body":{"injectables/StompConfig.html":{},"coverage.html":{}}}],["src/stomp.config.ts:24",{"_index":118,"title":{},"body":{"injectables/StompConfig.html":{}}}],["src/stomp.config.ts:31",{"_index":105,"title":{},"body":{"injectables/StompConfig.html":{}}}],["src/stomp.config.ts:38",{"_index":113,"title":{},"body":{"injectables/StompConfig.html":{}}}],["src/stomp.config.ts:46",{"_index":115,"title":{},"body":{"injectables/StompConfig.html":{}}}],["src/stomp.config.ts:54",{"_index":117,"title":{},"body":{"injectables/StompConfig.html":{}}}],["src/stomp.config.ts:57",{"_index":102,"title":{},"body":{"injectables/StompConfig.html":{}}}],["src/stomp.service.t",{"_index":332,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{}}}],["src/stomp.service.ts:20",{"_index":334,"title":{},"body":{"injectables/StompService.html":{}}}],["src/test.t",{"_index":465,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["st",{"_index":280,"title":{},"body":{"injectables/StompRService.html":{}}}],["start",{"_index":342,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":177,"title":{},"body":{"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["state.t",{"_index":475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statement",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":278,"title":{},"body":{"injectables/StompRService.html":{}}}],["statu",{"_index":231,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["step",{"_index":821,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stomp",{"_index":121,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["stomp.config",{"_index":276,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp.html",{"_index":560,"title":{},"body":{"index.html":{}}}],["stomp.j",{"_index":167,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp/ng2",{"_index":484,"title":{},"body":{"index.html":{}}}],["stomp/rx",{"_index":142,"title":{},"body":{"injectables/StompRPCConfig.html":{},"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"dependencies.html":{}}}],["stomp/stomp.j",{"_index":158,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp/stompj",{"_index":134,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"changelog.html":{},"index.html":{}}}],["stomp/stompjs';unsubscrib",{"_index":600,"title":{},"body":{"index.html":{}}}],["stomp_subscript",{"_index":590,"title":{},"body":{"index.html":{}}}],["stomp_subscription.map((messag",{"_index":593,"title":{},"body":{"index.html":{}}}],["stompconfig",{"_index":25,"title":{"injectables/StompConfig.html":{}},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["stompconfigservic",{"_index":414,"title":{},"body":{"changelog.html":{}}}],["stomphead",{"_index":104,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"changelog.html":{},"index.html":{}}}],["stompj",{"_index":406,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["stompjs/addit",{"_index":550,"title":{},"body":{"index.html":{}}}],["stompjs/changelog.html",{"_index":525,"title":{},"body":{"index.html":{}}}],["stompjs/index.html",{"_index":542,"title":{},"body":{"index.html":{}}}],["stompjs/injectables/stomprservice.html",{"_index":541,"title":{},"body":{"index.html":{}}}],["stompjs/injectables/stomprservice.html#publish",{"_index":603,"title":{},"body":{"index.html":{}}}],["stompjs/injectables/stomprservice.html#serverheadersobserv",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["stompjs/injectables/stomprservice.html#subscrib",{"_index":583,"title":{},"body":{"index.html":{}}}],["stompjs/injectables/stompservice.html",{"_index":540,"title":{},"body":{"index.html":{}}}],["stompjs/rx",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["stompjsthi",{"_index":537,"title":{},"body":{"index.html":{}}}],["stomprpcconfig",{"_index":135,"title":{"injectables/StompRPCConfig.html":{}},"body":{"injectables/StompRPCConfig.html":{},"coverage.html":{}}}],["stomprpcconfigforactivemq",{"_index":811,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stomprpcservic",{"_index":143,"title":{"injectables/StompRPCService.html":{}},"body":{"injectables/StompRPCService.html":{},"coverage.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stomprpcservice.rpc(myserviceendpoint",{"_index":794,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stomprservic",{"_index":7,"title":{"injectables/StompRService.html":{}},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stomprservice._mapstompstate(st",{"_index":288,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompservic",{"_index":24,"title":{"injectables/StompService.html":{}},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stompservice.publish(replyto",{"_index":779,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stompservice.st",{"_index":610,"title":{},"body":{"index.html":{}}}],["stompservice.subscribe(myserviceendpoint).subscribe((messag",{"_index":768,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stompservice.subscribe(replyqueuenam",{"_index":818,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["stompservicefactori",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["stompservicefactory(_conf",{"_index":82,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"miscellaneous/functions.html":{}}}],["stompstat",{"_index":275,"title":{},"body":{"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate.clos",{"_index":286,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.connect",{"_index":248,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.disconnect",{"_index":285,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.tri",{"_index":282,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate[st",{"_index":616,"title":{},"body":{"index.html":{}}}],["str",{"_index":309,"title":{},"body":{"injectables/StompRService.html":{}}}],["stream",{"_index":174,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["streamlin",{"_index":723,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["string",{"_index":106,"title":{},"body":{"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["string|publishparam",{"_index":319,"title":{},"body":{"injectables/StompRService.html":{}}}],["structur",{"_index":438,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["style",{"_index":488,"title":{},"body":{"index.html":{}}}],["sub",{"_index":592,"title":{},"body":{"index.html":{}}}],["subject",{"_index":259,"title":{},"body":{"injectables/StompRService.html":{},"license.html":{}}}],["sublicens",{"_index":674,"title":{},"body":{"license.html":{}}}],["subscrib",{"_index":165,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["subscribe((msg_bodi",{"_index":595,"title":{},"body":{"index.html":{}}}],["subscribe((statu",{"_index":617,"title":{},"body":{"index.html":{}}}],["subscribe(queuenam",{"_index":201,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["subscript",{"_index":218,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["substanti",{"_index":682,"title":{},"body":{"license.html":{}}}],["succeed",{"_index":495,"title":{},"body":{"index.html":{}}}],["success",{"_index":636,"title":{},"body":{"index.html":{}}}],["super",{"_index":327,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["super(_conf",{"_index":80,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["super.publish(pubparam",{"_index":324,"title":{},"body":{"injectables/StompRService.html":{}}}],["super.publish({destin",{"_index":321,"title":{},"body":{"injectables/StompRService.html":{}}}],["support",{"_index":360,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["switch",{"_index":380,"title":{},"body":{"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["tabl",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["techniqu",{"_index":622,"title":{},"body":{"index.html":{}}}],["temp",{"_index":780,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["templat",{"_index":587,"title":{},"body":{"index.html":{}}}],["temporari",{"_index":217,"title":{},"body":{"injectables/StompRService.html":{}}}],["termin",{"_index":800,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["test",{"_index":43,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["testb",{"_index":423,"title":{},"body":{"changelog.html":{}}}],["thing",{"_index":781,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["third",{"_index":793,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["this._stompcli",{"_index":326,"title":{},"body":{"injectables/StompRService.html":{}}}],["this._stompservice.config",{"_index":634,"title":{},"body":{"index.html":{}}}],["this._stompservice.connectobserv",{"_index":620,"title":{},"body":{"index.html":{}}}],["this._stompservice.initandconnect",{"_index":635,"title":{},"body":{"index.html":{}}}],["this._stompservice.publish('/topic/ng",{"_index":604,"title":{},"body":{"index.html":{}}}],["this._stompservice.st",{"_index":614,"title":{},"body":{"index.html":{}}}],["this._stompservice.subscribe('/topic/ng",{"_index":591,"title":{},"body":{"index.html":{}}}],["this.activ",{"_index":317,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.client.forcedisconnect",{"_index":81,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["this.config",{"_index":340,"title":{},"body":{"injectables/StompService.html":{}}}],["this.configure(rxstompconfig",{"_index":314,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.connected$.pipe(map((st",{"_index":287,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.connectionstate$.subscribe((st",{"_index":330,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.deactiv",{"_index":315,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.fetchconfigfromsomewher",{"_index":633,"title":{},"body":{"index.html":{}}}],["this.initandconnect",{"_index":341,"title":{},"body":{"injectables/StompService.html":{}}}],["this.serverhead",{"_index":289,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.stat",{"_index":328,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.state.next(stomprservice._mapstompstate(st",{"_index":331,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.stomperror",{"_index":292,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.unhandledmessag",{"_index":290,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.unhandledreceipt",{"_index":291,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.watch(queuenam",{"_index":325,"title":{},"body":{"injectables/StompRService.html":{}}}],["those",{"_index":738,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["though",{"_index":729,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["till",{"_index":623,"title":{},"body":{"index.html":{}}}],["time",{"_index":242,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["topic/echo",{"_index":767,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["topic/replies.${uuid.uuid",{"_index":815,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["tort",{"_index":702,"title":{},"body":{"license.html":{}}}],["travi",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["tri",{"_index":476,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["trigger",{"_index":237,"title":{},"body":{"injectables/StompRService.html":{}}}],["true",{"_index":76,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/sock-js.html":{}}}],["ts",{"_index":420,"title":{},"body":{"changelog.html":{},"additional-documentation/contributing.html":{}}}],["turn",{"_index":788,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["two",{"_index":748,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["type",{"_index":91,"title":{},"body":{"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typedoc",{"_index":382,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["typeof",{"_index":320,"title":{},"body":{"injectables/StompRService.html":{}}}],["typeof(config.url",{"_index":295,"title":{},"body":{"injectables/StompRService.html":{}}}],["typic",{"_index":45,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["unabl",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["uncom",{"_index":42,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{}}}],["undefin",{"_index":479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["undergon",{"_index":499,"title":{},"body":{"index.html":{}}}],["underli",{"_index":15,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompRService.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["understand",{"_index":212,"title":{},"body":{"injectables/StompRService.html":{}}}],["uniqu",{"_index":757,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["unit",{"_index":744,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["unless",{"_index":161,"title":{},"body":{"injectables/StompRService.html":{}}}],["unsubscrib",{"_index":601,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["updat",{"_index":374,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["url",{"_index":33,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["us",{"_index":147,"title":{},"body":{"injectables/StompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"index.html":{},"license.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{},"additional-documentation/contributing.html":{}}}],["usag",{"_index":539,"title":{},"body":{"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["user",{"_index":163,"title":{},"body":{"injectables/StompRService.html":{},"index.html":{}}}],["user/password",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["usevalu",{"_index":575,"title":{},"body":{"index.html":{}}}],["usual",{"_index":621,"title":{},"body":{"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["uuid",{"_index":813,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["valu",{"_index":58,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/sock-js.html":{}}}],["vari",{"_index":581,"title":{},"body":{"index.html":{}}}],["variabl",{"_index":446,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["veri",{"_index":761,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["version",{"_index":368,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":169,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["viaclass",{"_index":561,"title":{},"body":{"index.html":{}}}],["virtual",{"_index":110,"title":{},"body":{"injectables/StompConfig.html":{}}}],["void",{"_index":22,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompRService.html":{}}}],["wait",{"_index":63,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["waitforreceipt",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["want",{"_index":338,"title":{},"body":{"injectables/StompService.html":{}}}],["warranti",{"_index":684,"title":{},"body":{"license.html":{}}}],["watch",{"_index":609,"title":{},"body":{"index.html":{}}}],["way",{"_index":225,"title":{},"body":{"injectables/StompRService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["web",{"_index":556,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":16,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{},"additional-documentation/sock-js.html":{}}}],["websocket/codo/extra/doc",{"_index":725,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["well",{"_index":532,"title":{},"body":{"index.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["whether",{"_index":699,"title":{},"body":{"license.html":{}}}],["wire",{"_index":175,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["without",{"_index":669,"title":{},"body":{"license.html":{}}}],["work",{"_index":216,"title":{},"body":{"injectables/StompRService.html":{},"changelog.html":{},"index.html":{},"additional-documentation/sock-js.html":{},"additional-documentation/rpc---remote-procedure-call.html":{}}}],["worri",{"_index":731,"title":{},"body":{"additional-documentation/sock-js.html":{}}}],["wrapper",{"_index":489,"title":{},"body":{"index.html":{}}}],["ws://127.0.0.1:15674/w",{"_index":39,"title":{},"body":{"classes/MyStompRService.html":{},"classes/MyStompService.html":{},"injectables/StompConfig.html":{},"index.html":{}}}],["yarn",{"_index":535,"title":{},"body":{"index.html":{},"additional-documentation/contributing.html":{}}}],["yarnto",{"_index":825,"title":{},"body":{"additional-documentation/contributing.html":{}}}],["ye",{"_index":200,"title":{},"body":{"injectables/StompRService.html":{}}}],["yield",{"_index":798,"title":{},"body":{"additional-documentation/rpc---remote-procedure-call.html":{}}}],["yourclass",{"_index":630,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/MyStompRService.html":{"url":"classes/MyStompRService.html","title":"class - MyStompRService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyStompRService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/specs/app/services/compatibility/stomp.service.factory.ts\n        \n\n\n            \n                Extends\n            \n            \n                    StompRService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                forceDisconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            forceDisconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forceDisconnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/specs/app/services/compatibility/stomp.service.factory.ts:63\n                            \n                        \n\n\n                \n                    \n                            This method closes the underlying WebSocket, simulating a close due to an error\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { StompRService, StompService, StompConfig } from '../../../../../';\nimport * as SockJS from 'sockjs-client';\n\n\nexport function socketProvider() {\n  // See below (url property of defaultConfig)\n  return new SockJS('http://127.0.0.1:15674/stomp');\n}\n\nexport function defaultConfig(): StompConfig {\n  return {\n    // Which server?\n    url: 'ws://127.0.0.1:15674/ws',\n\n    // Comment above and uncomment below to test with SockJS\n    // url: socketProvider,\n\n    // Headers\n    // Typical keys: login, passcode, host\n    headers: {\n      login: 'guest',\n      passcode: 'guest'\n    },\n\n    // How often to heartbeat?\n    // Interval in milliseconds, set to 0 to disable\n    heartbeat_in: 0, // Typical value 0 - disabled\n    heartbeat_out: 0, // Typical value 20000 - every 20 seconds\n\n    // Wait in milliseconds before attempting auto reconnect\n    // Set to 0 to disable\n    // Typical value 5000 (5 seconds)\n    reconnect_delay: 200,\n\n    // Will log diagnostics on console\n    debug: true\n  };\n}\n\nexport class MyStompService extends StompService {\n  constructor(private _conf: StompConfig) {\n    super(_conf);\n  }\n\n  /**\n   * This method closes the underlying WebSocket, simulating a close due to an error\n   */\n  public forceDisconnect(): void {\n    this.client.forceDisconnect();\n  }\n}\n\nexport function stompServiceFactory(_conf: StompConfig) {\n  return new MyStompService(_conf);\n}\n\nexport class MyStompRService extends StompRService {\n  /**\n   * This method closes the underlying WebSocket, simulating a close due to an error\n   */\n  public forceDisconnect(): void {\n    this.client.forceDisconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MyStompService.html":{"url":"classes/MyStompService.html","title":"class - MyStompService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyStompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/specs/app/services/compatibility/stomp.service.factory.ts\n        \n\n\n            \n                Extends\n            \n            \n                    StompService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                forceDisconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_conf: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in src/specs/app/services/compatibility/stomp.service.factory.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _conf\n                                                  \n                                                        \n                                                                    StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            forceDisconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        forceDisconnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/specs/app/services/compatibility/stomp.service.factory.ts:50\n                            \n                        \n\n\n                \n                    \n                            This method closes the underlying WebSocket, simulating a close due to an error\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { StompRService, StompService, StompConfig } from '../../../../../';\nimport * as SockJS from 'sockjs-client';\n\n\nexport function socketProvider() {\n  // See below (url property of defaultConfig)\n  return new SockJS('http://127.0.0.1:15674/stomp');\n}\n\nexport function defaultConfig(): StompConfig {\n  return {\n    // Which server?\n    url: 'ws://127.0.0.1:15674/ws',\n\n    // Comment above and uncomment below to test with SockJS\n    // url: socketProvider,\n\n    // Headers\n    // Typical keys: login, passcode, host\n    headers: {\n      login: 'guest',\n      passcode: 'guest'\n    },\n\n    // How often to heartbeat?\n    // Interval in milliseconds, set to 0 to disable\n    heartbeat_in: 0, // Typical value 0 - disabled\n    heartbeat_out: 0, // Typical value 20000 - every 20 seconds\n\n    // Wait in milliseconds before attempting auto reconnect\n    // Set to 0 to disable\n    // Typical value 5000 (5 seconds)\n    reconnect_delay: 200,\n\n    // Will log diagnostics on console\n    debug: true\n  };\n}\n\nexport class MyStompService extends StompService {\n  constructor(private _conf: StompConfig) {\n    super(_conf);\n  }\n\n  /**\n   * This method closes the underlying WebSocket, simulating a close due to an error\n   */\n  public forceDisconnect(): void {\n    this.client.forceDisconnect();\n  }\n}\n\nexport function stompServiceFactory(_conf: StompConfig) {\n  return new MyStompService(_conf);\n}\n\nexport class MyStompRService extends StompRService {\n  /**\n   * This method closes the underlying WebSocket, simulating a close due to an error\n   */\n  public forceDisconnect(): void {\n    this.client.forceDisconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompConfig.html":{"url":"injectables/StompConfig.html","title":"injectable - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp.config.ts\n        \n\n            \n                Description\n            \n            \n                Represents a configuration object for the\nSTOMPService to connect to.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                headers\n                            \n                            \n                                heartbeat_in\n                            \n                            \n                                heartbeat_out\n                            \n                            \n                                reconnect_delay\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:57\n                            \n                        \n\n                \n                    \n                        Enable client debugging? \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            headers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        headers:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:31\n                            \n                        \n\n                \n                    \n                        Headers\nTypical keys: login: string, passcode: string.\nhost:string will neeed to be passed for virtual hosts in RabbitMQ\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            heartbeat_in\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeat_in:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:38\n                            \n                        \n\n                \n                    \n                        How often to incoming heartbeat?\nInterval in milliseconds, set to 0 to disable\nTypical value 0 - disabled\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            heartbeat_out\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeat_out:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:46\n                            \n                        \n\n                \n                    \n                        How often to outgoing heartbeat?\nInterval in milliseconds, set to 0 to disable\nTypical value 20000 - every 20 seconds\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reconnect_delay\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reconnect_delay:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:54\n                            \n                        \n\n                \n                    \n                        Wait in milliseconds before attempting auto reconnect\nSet to 0 to disable\nTypical value 5000 (5 seconds)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        url:     string | \n\n                    \n                \n                    \n                        \n                            Type :     string | \n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp.config.ts:24\n                            \n                        \n\n                \n                    \n                        Server URL to connect to. Please refer to your STOMP broker documentation for details.\nExample: ws://127.0.0.1:15674/ws (for a RabbitMQ default setup running on localhost)\nAlternatively this parameter can be a function that returns an object similar to WebSocket\n(typically SockJS instance).\nExample:\n() => {\n   return new SockJS('http://127.0.0.1:15674/stomp');\n}\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { StompHeaders } from \"@stomp/stompjs\";\n/**\n * Represents a configuration object for the\n * STOMPService to connect to.\n */\n\n@Injectable()\nexport class StompConfig {\n  /**\n   * Server URL to connect to. Please refer to your STOMP broker documentation for details.\n   *\n   * Example: ws://127.0.0.1:15674/ws (for a RabbitMQ default setup running on localhost)\n   *\n   * Alternatively this parameter can be a function that returns an object similar to WebSocket\n   * (typically SockJS instance).\n   *\n   * Example:\n   *\n   * () => {\n   *   return new SockJS('http://127.0.0.1:15674/stomp');\n   * }\n   */\n  url: string | (() => any);\n\n  /**\n   * Headers\n   * Typical keys: login: string, passcode: string.\n   * host:string will neeed to be passed for virtual hosts in RabbitMQ\n   */\n  headers: StompHeaders;\n\n  /** How often to incoming heartbeat?\n   * Interval in milliseconds, set to 0 to disable\n   *\n   * Typical value 0 - disabled\n   */\n  heartbeat_in: number;\n\n  /**\n   * How often to outgoing heartbeat?\n   * Interval in milliseconds, set to 0 to disable\n   *\n   * Typical value 20000 - every 20 seconds\n   */\n  heartbeat_out: number;\n\n  /**\n   * Wait in milliseconds before attempting auto reconnect\n   * Set to 0 to disable\n   *\n   * Typical value 5000 (5 seconds)\n   */\n  reconnect_delay: number;\n\n  /** Enable client debugging? */\n  debug: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompRPCConfig.html":{"url":"injectables/StompRPCConfig.html","title":"injectable - StompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp-rpc.config.ts\n        \n\n            \n                Description\n            \n            \n                RPC Config. See the guide for example.\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from \"@angular/core\";\n\nimport {RxStompRPCConfig} from \"@stomp/rx-stomp\";\n\n/**\n * RPC Config. See the guide for example.\n */\n@Injectable()\nexport class StompRPCConfig extends RxStompRPCConfig { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompRPCService.html":{"url":"injectables/StompRPCService.html","title":"injectable - StompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp-rpc.service.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of RPC service using messaging.\nPlease see the guide for details.\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\n\nimport {RxStompRPC} from \"@stomp/rx-stomp\";\n\n/**\n * An implementation of RPC service using messaging.\n *\n * Please see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n */\n@Injectable()\nexport class StompRPCService extends RxStompRPC { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompRService.html":{"url":"injectables/StompRService.html","title":"injectable - StompRService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompRService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp-r.service.ts\n        \n\n            \n                Description\n            \n            \n                Angular2 STOMP Raw Service using @stomp/stomp.js\nYou will only need the public properties and\nmethods listed unless you are an advanced user. This service handles subscribing to a\nmessage queue using the stomp.js library, and returns\nvalues via the ES6 Observable specification for\nasynchronous value streaming by wiring the STOMP\nmessages into an observable.\nIf you will like to pass the configuration as a dependency,\nplease use StompService class.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    connectObservable\n                                \n                                \n                                    serverHeadersObservable\n                                \n                                \n                                    defaultMessagesObservable\n                                \n                                \n                                    receiptsObservable\n                                \n                                \n                                    errorSubject\n                                \n                                \n                                    config\n                                \n                                \n                                    client\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in src/stomp-r.service.ts:184\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        disconnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:138\n                            \n                        \n\n\n                \n                    \n                            It will disconnect from the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            initAndConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initAndConnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:127\n                            \n                        \n\n\n                \n                    \n                            It will connect to the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(queueName: string | publishParams, message?: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:152\n                            \n                        \n\n\n                \n                    \n                            It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string | publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        message\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            subscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribe(queueName: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/stomp-r.service.ts:178\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, mssages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            state\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        state:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in src/stomp-r.service.ts:35\n                            \n                        \n\n                \n                    \n                        State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        connectObservable\n                    \n                \n\n                \n                    \n                        getconnectObservable()\n                    \n                \n                            \n                                \n                                    Defined in src/stomp-r.service.ts:58\n                                \n                            \n                    \n                        \n                                Will trigger when connection is established. Use this to carry out initialization.\nIt will trigger every time a (re)connection occurs. If it is already connected\nit will trigger immediately. You can safely ignore the value, as it will always be\nStompState.CONNECTED\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        serverHeadersObservable\n                    \n                \n\n                \n                    \n                        getserverHeadersObservable()\n                    \n                \n                            \n                                \n                                    Defined in src/stomp-r.service.ts:71\n                                \n                            \n                    \n                        \n                                Provides headers from most recent connection to the server as return by the CONNECTED\nframe.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will additionally trigger in event of reconnection, the value will be set of headers from\nthe recent server response.\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultMessagesObservable\n                    \n                \n\n                \n                    \n                        getdefaultMessagesObservable()\n                    \n                \n                            \n                                \n                                    Defined in src/stomp-r.service.ts:78\n                                \n                            \n                    \n                        \n                                Will emit all messages to the default queue (any message that are not handled by a subscription)\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        receiptsObservable\n                    \n                \n\n                \n                    \n                        getreceiptsObservable()\n                    \n                \n                            \n                                \n                                    Defined in src/stomp-r.service.ts:85\n                                \n                            \n                    \n                        \n                                Will emit all receipts\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorSubject\n                    \n                \n\n                \n                    \n                        geterrorSubject()\n                    \n                \n                            \n                                \n                                    Defined in src/stomp-r.service.ts:93\n                                \n                            \n                    \n                        \n                                Will trigger when an error occurs. This Subject can be used to handle errors from\nthe stomp broker.\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(config: )\n                    \n                \n                            \n                                \n                                    Defined in src/stomp-r.service.ts:98\n                                \n                            \n                    \n                        \n                                Set configuration \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        client\n                    \n                \n\n                \n                    \n                        getclient()\n                    \n                \n                            \n                                \n                                    Defined in src/stomp-r.service.ts:182\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\n\nimport {RxStomp, RxStompConfig, RxStompState} from \"@stomp/rx-stomp\";\n\nimport {publishParams, Client, Message, Frame} from \"@stomp/stompjs\";\n\nimport {BehaviorSubject, Observable, Subject} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\nimport {StompState} from \"./stomp-state\";\nimport { StompHeaders } from './stomp-headers';\nimport {StompConfig} from \"./stomp.config\";\n\n/**\n * Angular2 STOMP Raw Service using @stomp/stomp.js\n *\n * You will only need the public properties and\n * methods listed unless you are an advanced user. This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you will like to pass the configuration as a dependency,\n * please use StompService class.\n */\n@Injectable()\nexport class StompRService extends RxStomp {\n  /**\n   * State of the STOMPService\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public state: BehaviorSubject;\n\n  private static _mapStompState(st: RxStompState): StompState {\n    if (st === RxStompState.CONNECTING) {\n      return StompState.TRYING;\n    }\n    if (st === RxStompState.OPEN) {\n      return StompState.CONNECTED;\n    }\n    if (st === RxStompState.CLOSING) {\n      return StompState.DISCONNECTING;\n    }\n    if (st === RxStompState.CLOSED) {\n      return StompState.CLOSED;\n    }\n  }\n\n  /**\n   * Will trigger when connection is established. Use this to carry out initialization.\n   * It will trigger every time a (re)connection occurs. If it is already connected\n   * it will trigger immediately. You can safely ignore the value, as it will always be\n   * StompState.CONNECTED\n   */\n  get connectObservable(): Observable {\n    return this.connected$.pipe(map((st: RxStompState): StompState => {\n      return StompRService._mapStompState(st);\n    }));\n  }\n\n  /**\n   * Provides headers from most recent connection to the server as return by the CONNECTED\n   * frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will additionally trigger in event of reconnection, the value will be set of headers from\n   * the recent server response.\n   */\n  get serverHeadersObservable(): Observable {\n    return this.serverHeaders$;\n  }\n\n  /**\n   * Will emit all messages to the default queue (any message that are not handled by a subscription)\n   */\n  get defaultMessagesObservable(): Subject {\n    return this.unhandledMessage$;\n  }\n\n  /**\n   * Will emit all receipts\n   */\n  get receiptsObservable(): Subject {\n    return this.unhandledReceipts$;\n  }\n\n  /**\n   * Will trigger when an error occurs. This Subject can be used to handle errors from\n   * the stomp broker.\n   */\n  get errorSubject(): Subject {\n    return this.stompErrors$;\n  }\n\n  /** Set configuration */\n  set config(config: StompConfig) {\n    const rxStompConfig: RxStompConfig = { };\n\n    if (typeof(config.url) === 'string') {\n      rxStompConfig.brokerURL = config.url;\n    } else {\n      rxStompConfig.webSocketFactory = config.url;\n    }\n\n    // Configure client heart-beating\n    rxStompConfig.heartbeatIncoming = config.heartbeat_in;\n    rxStompConfig.heartbeatOutgoing = config.heartbeat_out;\n\n    // Auto reconnect\n    rxStompConfig.reconnectDelay = config.reconnect_delay;\n\n    if (config.debug) {\n      rxStompConfig.debug = (str: string): void => {\n        console.log(new Date(), str);\n      }\n    }\n\n    rxStompConfig.connectHeaders = config.headers;\n\n    this.configure(rxStompConfig);\n  }\n  /**\n   * It will connect to the STOMP broker.\n   */\n  public initAndConnect(): void {\n    // disconnect if connected\n    this.deactivate();\n\n    // Attempt connection, passing in a callback\n    this.activate();\n  }\n\n  /**\n   * It will disconnect from the STOMP broker.\n   */\n  public disconnect(): void {\n    this.deactivate();\n  }\n\n  /**\n   * It will send a message to a named destination. The message must be `string`.\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * @param queueName\n   * @param message\n   * @param headers\n   */\n  public publish(queueName: string|publishParams, message?: string, headers: StompHeaders = {}): void {\n    if (typeof queueName === 'string') {\n      super.publish({destination: queueName as string, body: message, headers});\n    } else {\n      const pubParams: publishParams = queueName;\n      super.publish(pubParams);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * If a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\n   * do not understand what it means, please leave it as is.\n   *\n   * Note that when working with temporary queues where the subscription request\n   * creates the\n   * underlying queue, mssages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * @param queueName\n   * @param headers\n   */\n  public subscribe(queueName: string, headers: StompHeaders = {}): Observable {\n    return this.watch(queueName, headers);\n  }\n\n  get client(): Client {\n    return this._stompClient;\n  }\n\n  public constructor() {\n    super();\n\n    this.state = new BehaviorSubject(StompState.CLOSED);\n\n    this.connectionState$.subscribe((st: RxStompState) => {\n      this.state.next(StompRService._mapStompState(st));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompService.html":{"url":"injectables/StompService.html","title":"injectable - StompService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Angular2 STOMP Service using @stomp/stomp.js\n\n            \n\n            \n                Example\n            \n            \n            \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in src/stomp.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { StompConfig } from './stomp.config';\n\nimport { StompRService } from './stomp-r.service';\n\n/**\n * Angular2 STOMP Service using @stomp/stomp.js\n *\n * @description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\n@Injectable()\nexport class StompService extends StompRService {\n\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor(config: StompConfig) {\n    super();\n\n    this.config = config;\n    this.initAndConnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\n7.0.0-beta.1 2018-10-31\n\nBased on @stompjs/rx-stomp\nCompatibility mode working\n\n6.1.0.beta.4 2018-09-24\n\nCorrect packaging error\n\n6.1.0.beta.3 2018-09-23\n\nRPC support\n\n4.0.1 & 6.0.1 2018-07-20\n\nFix issue with disconnect #77\n\nAngular 6\n\nIt will have version numbers in 6.x.x format.\n\nAngular 2/4/5\n\nIt will have version numbers in 4.x.x format.\n\n0.6.4\n\nUpdates in test cases.\nDocumentation update.\nUpdated dependency of @stomp/stompjs to >= 4.0.2\nwaitForReceipt now passes the frame to the callback.\n\n0.6.3\n\nSwitched to Compodoc from TypeDoc.\nChanged StompHeaders types to allow any type (instead of string) as value.\nDocumentation changes.\n\n0.6.2\n\nAdded ability to get server headers from CONNECTED Frame \nhttps://stomp-js.github.io/ng2-stompjs/injectables/StompRService.html#serverHeadersObservable\nEnabled Travis\n\n0.6.1\n\nUpdated dependencies\n\n0.6.0\n\nJump in version number to indicate compiled JS release\nImproved Angular 5 support\n\n0.4.3\n\nAbility to delay initialization\nAngular 5 compatibility\n\n0.4.2\n\nInitial SockJS Support.\nSample at https://github.com/stomp-js/ng4-stompjs-demo/tree/sockjs\n\n0.4.0\n\nUpdated to make it compliant to possible use of APP_INITIALIZER. The way to initiate the service has changed and it no longer uses StompConfigService.\nStompConfig is directly injected as dependency into StompService\n\n0.3.8\n\nSwitched to source distribution. The npm bundle now only has .ts files\n\n0.3.5\n\nTest case at https://github.com/stomp-js/ng2-stompjs-testbed these\nwill be merged into main repository in future. Currently unable\nto configure Karma correctly in the main project. Any help appreciated\n\n0.3.4\n\nAdded references to GitHub pages\n\n0.3.0\n\nConfiguration structure has changed, user/password are not part of header\nSupport for headers in connect, subscribe, and publish\nTypedoc for API documentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/environments/environment.prod.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environments/environment.ts\n            \n            \n                variable\n            \n            \n                environment\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/specs/app/services/compatibility/helpers.ts\n            \n            \n                function\n            \n            \n                disconnetStompRAndEnsure\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/specs/app/services/compatibility/helpers.ts\n            \n            \n                function\n            \n            \n                ensureStompConnected\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/specs/app/services/compatibility/helpers.ts\n            \n            \n                function\n            \n            \n                ensureStompRDisconnected\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/specs/app/services/compatibility/stomp.service.factory.ts\n            \n            \n                class\n            \n            \n                MyStompRService\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/specs/app/services/compatibility/stomp.service.factory.ts\n            \n            \n                class\n            \n            \n                MyStompService\n            \n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/specs/app/services/compatibility/stomp.service.factory.ts\n            \n            \n                function\n            \n            \n                defaultConfig\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/specs/app/services/compatibility/stomp.service.factory.ts\n            \n            \n                function\n            \n            \n                socketProvider\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/specs/app/services/compatibility/stomp.service.factory.ts\n            \n            \n                function\n            \n            \n                stompServiceFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stomp-r.service.ts\n            \n            \n                injectable\n            \n            \n                StompRService\n            \n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/stomp-rpc.config.ts\n            \n            \n                injectable\n            \n            \n                StompRPCConfig\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/stomp-rpc.service.ts\n            \n            \n                injectable\n            \n            \n                StompRPCService\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/stomp.config.ts\n            \n            \n                injectable\n            \n            \n                StompConfig\n            \n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/stomp.service.ts\n            \n            \n                injectable\n            \n            \n                StompService\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            \n                variable\n            \n            \n                context\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/test.ts\n            \n            \n                variable\n            \n            \n                require\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @stomp/rx-stomp : 0.1.0-beta.2\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            StompState   (src/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Possible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            defaultConfig   (src/.../stomp.service.factory.ts)\n                        \n                        \n                            disconnetStompRAndEnsure   (src/.../helpers.ts)\n                        \n                        \n                            ensureStompConnected   (src/.../helpers.ts)\n                        \n                        \n                            ensureStompRDisconnected   (src/.../helpers.ts)\n                        \n                        \n                            socketProvider   (src/.../stomp.service.factory.ts)\n                        \n                        \n                            stompServiceFactory   (src/.../stomp.service.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/specs/app/services/compatibility/stomp.service.factory.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultConfig\n                            \n                            \n                        \n                    \n                \n                \n                    \ndefaultConfig()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            socketProvider\n                            \n                            \n                        \n                    \n                \n                \n                    \nsocketProvider()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stompServiceFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nstompServiceFactory(_conf: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _conf\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    src/specs/app/services/compatibility/helpers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            disconnetStompRAndEnsure\n                            \n                            \n                        \n                    \n                \n                \n                    \ndisconnetStompRAndEnsure(stompService: undefined, done: )\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stompService\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        done\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ensureStompConnected\n                            \n                            \n                        \n                    \n                \n                \n                    \nensureStompConnected(stompService: undefined, done: )\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stompService\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        done\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ensureStompRDisconnected\n                            \n                            \n                        \n                    \n                \n                \n                    \nensureStompRDisconnected(stompService: undefined, done: )\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stompService\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        done\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@stomp/ng2-stompjs\nAngular 2/4/5 \nAngular 6 \nAn Angular (Angular2, Angular4, Angular5, Angular6 ...) style wrapper for @stomp/stompjs.\nVersion Compatibility\nWhile we tried really hard to support multiple Angular versions with same release -\nactually succeeded for Anguar 2/4/5, it is not possible for Angular 6. This library\nmakes quite extensive use of rxjs which has undergone breaking changes in Angular 6.\nGoing forward following numbering scheme will be followed:\n\n6.x.x - managed in master branch, will only support Angular 6 - use dependency like \"^6.0.0\" \n4.x.x - managed in angular4 branch, will support Angular 2/4/5 - use dependency like \"^4.0.0\"\n\nFor the time being both versions will be maintained. From October 2018, only critical\nupdates will be applied to 4.x.x releases.\nAs of now both versions offer exactly same APIs.\nSpecial Request\nRecently documentation has been switched to\nCompodoc from TypeDoc.\nPlease raise an issue if you find broken links or inconsistency in documentation.\nDocumentation\nPlease head to https://stomp-js.github.io/ng2-stompjs/\nChangelog at https://stomp-js.github.io/ng2-stompjs/changelog.html\nCompatibility\nTested with Angular CLI generated Angular2 (2.4.0), Angular4 (4.0.0), \nAngular (5.0.0). \nIt has been reported to work with ionic projects as well.\nInstallation\nTo install this library, run:\n$ npm install @stomp/ng2-stompjs --saveor, if using yarn:\n$ yarn add @stomp/ng2-stompjsThis will additionally install @stomp/stompjs \nfrom https://github.com/stomp-js/stomp-websocket\nUsage\n\nSee API documentation at \nhttps://stomp-js.github.io/ng2-stompjs/injectables/StompService.html,\nhttps://stomp-js.github.io/ng2-stompjs/injectables/StompRService.html\nand https://stomp-js.github.io/ng2-stompjs/index.html\nGeneral Demos (using Angular CLI)\nhttps://github.com/stomp-js/ng6-stompjs-demo\nhttps://github.com/stomp-js/ng5-stompjs-demo\nhttps://github.com/stomp-js/ng4-stompjs-demo\nhttps://github.com/stomp-js/ng2-stompjs-demo \n\n\nhttps://github.com/stomp-js/ng2-stompjs-demo also demonstrates fetching\nStomp configuration using a http call (APP_INITIALIZER)\nSee SockJS Support.\nhttps://github.com/stomp-js/ng4-stompjs-demo/tree/sockjs for a sample\nusing SockJS\n\nSockJS Users\nYou must read https://stomp-js.github.io/ng2-stompjs/additional-documentation/sock-js.html  \nPrerequisites\n\nYou will need to have a Stomp broker running.\nThe sample code on this page assumes you have\nRabbitMQ running with default settings and Web STOMP plugin activated.\n(see: https://www.rabbitmq.com/web-stomp.html.)\n\nAll the Hard Work\n\nThe main service is StompService, which will need to be provided\nThe STOMP Broker connection details will need to be provided viaclass StompConfig. See the samples for several ways to configure it\nSee https://angular.io/docs/ts/latest/guide/dependency-injection.html for\nbackground reading\nSample configuration:\n\n    const stompConfig: StompConfig = {\n      // Which server?\n      url: 'ws://127.0.0.1:15674/ws',\n\n      // Headers\n      // Typical keys: login, passcode, host\n      headers: {\n        login: 'guest',\n        passcode: 'guest'\n      },\n\n      // How often to heartbeat?\n      // Interval in milliseconds, set to 0 to disable\n      heartbeat_in: 0, // Typical value 0 - disabled\n      heartbeat_out: 20000, // Typical value 20000 - every 20 seconds\n\n      // Wait in milliseconds before attempting auto reconnect\n      // Set to 0 to disable\n      // Typical value 5000 (5 seconds)\n      reconnect_delay: 5000,\n\n      // Will log diagnostics on console\n      debug: true\n    };\nSee https://github.com/stomp-js/ng4-stompjs-demo/blob/master/src/app/app.module.ts \nfor a sample code file with configuration passed from a local\nhash. Feel free to copy and modify this file\nSee https://github.com/stomp-js/ng2-stompjs-demo/blob/master/src/app/app.module.ts\nfor a sample code file with configuration fetched from a http\nresource\nAssuming the config specified as a const, code sample to \nprovide StompService and StompConfig will look like:\n\n  providers: [\n    StompService,\n    {\n      provide: StompConfig,\n      useValue: stompConfig\n    }\n  ]\nSee https://github.com/stomp-js/ng4-stompjs-demo/blob/master/src/app/app.module.ts\nfor a sample file\n\nReap the Benefits\nInject StompService\nIn your constructor (typically of a component or a service), inject\n  StompService as a dependency:\nconstructor(private _stompService: StompService) { }Subscribe to a queue\nThe queue name structure and semantics vary\nbased on your specific STOMP Broker, \nsee: https://www.rabbitmq.com/stomp.html\nfor RabbitMQ specific details.\nCall subscribe(queueName: string, headers: StompHeaders = {}) \nwith name of the queue which returns an Observable (details at:\nhttps://stomp-js.github.io/ng2-stompjs/injectables/StompRService.html#subscribe). Any\nof Observable specific operators (map, filter, subscribe, etc.) can be\napplied on it. This can also be set into a template with async pipe.\nExample:\n    let stomp_subscription = this._stompService.subscribe('/topic/ng-demo-sub');\n\n    stomp_subscription.map((message: Message) => {\n      return message.body;\n    }).subscribe((msg_body: string) => {\n      console.log(`Received: ${msg_body}`);\n    });\nThe Message class comes from @stomp/stompjs. So, you will need the\nfollowing import in the classes where you consume messages:\nimport {Message} from '@stomp/stompjs';Unsubscribe from a queue\nYou will need to unsubscribe from stomp_subscription (which is an Observer),\nit will then internally unsubscribe from the underlying STOMP queue\nsubscription.\nPublishing messages\nCall publish(queueName: string, message: string, headers: StompHeaders = {}) \n(details at: https://stomp-js.github.io/ng2-stompjs/injectables/StompRService.html#publish).\nExample:\nthis._stompService.publish('/topic/ng-demo-sub', 'My important message');Please note that message is actually string. So, if you need to send JSON\nyou will need to convert it into string (typically using \nJSON.stringify())\nWatching for Stomp connection status\n\nstompService.state is a BehaviorSubject which maintains and switches\nits value as per the underlying Stomp Connection status.\nThe value is from an enum with these possible values: \nCLOSED\nTRYING\nCONNECTED\nDISCONNECTING\n\n\nThe following code will subscribe to stompService.state and convert\nthe enum value (which is a number) to the corresponding string value:\n\n    this._stompService.state\n      .map((state: number) => StompState[state])\n      .subscribe((status: string) => {\n      console.log(`Stomp connection status: ${status}`);\n    });If you are interested in watching only when connection is established, you can\nsubscribe to this._stompService.connectObservable.\nDelayed initialization\nIt is usually possible to use Angular dependency injection techniques and\nAPP_INITIALIZER to delay the initialization till the configuration is ready\n(may be fetched using an API call.) See a sample at:\nhttps://github.com/stomp-js/ng2-stompjs-demo\nThe initialization process can be manually controlled with the additional \nclass StompRService which is injected \ninstead of StompService. This has a few additional\nmethods to assign a configuration and manually initiate the connection to the STOMP Broker.\n// Do not provide StompService or StompConfig, only provide StompRService\n\n  providers: [\n    StompRService\n  ]\nclass YourClass {}\n    constructor(private _stompService: StompRService) { }\n\n    public initStomp() {\n      StompConfig config;\n\n      cofig = this.fetchConfigFromSomeWhere();\n\n      this._stompService.config = config;\n      this._stompService.initAndConnect();\n    }\n}The methods subscribe and publish can be called even before call to initAndConnect.\nHowever these will be queued till the actual connection is successful.\nFor the curious - initAndConnect may be called more than once with a potentially\nupdated configuration.\nContributors\n\nSam Finnigan\nJimi (Dimitris) Charalampidis\nDeepak Kumar\nAstha Deep\nMichel Promonet\nEveryone involved at https://github.com/stomp-js/stomp-websocket\n\nLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright (c) 2017 Deepak Kumar\nMIT License\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (src/.../test.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            require   (src/.../test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        context:     \n\n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        require:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.prod.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: true\n}\n                        \n                    \n\n\n            \n        \n\n    src/environments/environment.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environment\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        environment:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  production: false\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/sock-js.html":{"url":"additional-documentation/sock-js.html","title":"additional-page - Sock JS","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing with SockJS\nSee sample at https://github.com/stomp-js/ng4-stompjs-demo/tree/sockjs\nAlmost all brokers that support SockJS also support WebSockets.\nIf your application does not need to support old browsers, switch to using WebSockets.\nCheck https://en.wikipedia.org/wiki/WebSocket for compatibility information.\nNotes\n\nIt is an initial release.\nInstead of a url in the default form, you need \nto pass it as a socketProvider function. It will be streamlined in a\nfuture release.\nPlease read notes on SockJS support of the underlying library at\nhttps://stomp-js.github.io/stomp-websocket/codo/extra/docs-src/sockjs.md.html\n\nUsage\nInstall SockJS Client\n$ npm install sockjs-client --saveImport SockJS class\nimport * as SockJS from 'sockjs-client';Implement a socketProvider\nCreate a function that returns an object similar to WebSocket (typically SockJS instance).\nexport function socketProvider() {\n  return new SockJS('http://127.0.0.1:15674/stomp');\n}StompConfig\nPass the function as url in StompConfig.\n It will work even\nthough name of the parameter is url, don't worry :)\nExample:\nconst stompConfig: StompConfig = {\n  // Which server?\n  url: socketProvider,\n\n  // Headers\n  // Typical keys: login, passcode, host\n  headers: {\n    login: 'guest',\n    passcode: 'guest'\n  },\n\n  // How frequent is the heartbeat?\n  // Interval in milliseconds, set to 0 to disable\n  heartbeat_in: 0, // Typical value 0 - disabled\n  heartbeat_out: 20000, // Typical value 20000 - every 20 seconds\n\n  // Wait in milliseconds before attempting auto reconnect\n  // Set to 0 to disable\n  // Typical value 5000 (5 seconds)\n  reconnect_delay: 5000,\n\n  // Will log diagnostics on console\n  debug: true\n};Limitations\nCopied from https://stomp-js.github.io/stomp-websocket/codo/extra/docs-src/sockjs.md.html\n\nSockJS is an emulation of WebSockets. This is not a complete implementation.\nHeart beating is not supported.\nSockJS internally uses one of many possible means to communicate. In some of those, auto reconnect may occasionally fail.\n\nWhen Hacking Code of this Library\n\nWhen developing on this library code to use SockJS, please adjust the unit tests to use\nSockJS.\nUnit testes may occasionally fail in SockJS. It is because of limitations\nof SockJS around allowing only one SockJS connection at a time. Usually \nthis should not affect your usage of the library.\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/rpc---remote-procedure-call.html":{"url":"additional-documentation/rpc---remote-procedure-call.html","title":"additional-page - RPC - Remote Procedure Call","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRPC - Remote Procedure Call\nMessaging usually works one way.\nThere is however a convention for two way communication (i.e. request/response).\nThis involves reply-to queues which routes the response back to correct client program\nand correlation-id to uniquely match a response to the correct request.\nSee: https://www.rabbitmq.com/tutorials/tutorial-six-python.html for a sample using\na very similar approach.\nImplementing the RPC server endpoint\nThis can be implemented in any language, in most cases it will be there in some backend server.\n    const myServiceEndPoint = '/topic/echo';\n\n    stompService.subscribe(myServiceEndPoint).subscribe((message: Message) => {\n      // The response needs to be sent back here\n      const replyTo = message.headers['reply-to'];\n\n      // Same correlation id needs to be sent back as message header\n      const correlationId = message.headers['correlation-id'];\n\n      // Process the request, compute the response\n      const incomingMessage = message.body;\n\n      const outgoingMessage = 'Echoing - ' + incomingMessage;\n\n      // Send the response back to destination `replyTo` with `correlation-id` header\n      stompService.publish(replyTo, outgoingMessage, {'correlation-id' : correlationId});\n    });Using it from the client\nRabbitMQ\nRabbitMQ has special support for temp-queues in reply-to messages\nwhich make things to work magically. Really I mean it.\nIf you don't believe me check details at https://www.rabbitmq.com/stomp.html#d.tqd\nWell the client code looks equally simple and similar to what you would expect\nto use with any backend service.\nThe StompRPCService can be created by means of Angular Dependency Injection\nor be created manually.\nIt in turns needs an initialized StompRService as\na dependency (or argument).\nStompService is a derived class of StompRService, so that will work as well.\n    const myServiceEndPoint = '/topic/echo';\n\n    const request = 'Hello';\n    // It accepts a optional third argument a Hash of headers to be sent as part of the request\n    stompRPCService.rpc(myServiceEndPoint, request).subscribe((message: Message) => {\n      // Consume the response\n      console.log(message.body);\n    });Just like Ajax requests, it will yield only once.\nThere is another method called stream that will not terminate after one response.\nThis can be used to receive stream of responses for a single request.\nIf you use that it will be your responsibility to unsubscribe when you do not expect\nany additional messages.\nOther Brokers\nThere are few requirements:\n\nthe reply queue name must be unique across the broker.\nideally, for security reasons only the client creating the queue should have access to it.\n\nMany brokers have temp-queue concept which should simplify your work. \nFollowing gives and outline:\n  const stompRPCConfigForActiveMQ = {\n    // A unique name, BTW angular2-uuid module is already added as dependency\n    replyQueueName: `/topic/replies.${UUID.UUID()}`,\n\n    // Simply subscribe, you would need to secure by adding broker specific options\n    setupReplyQueue: (replyQueueName: string, stompService: StompRService) => {\n      return stompService.subscribe(replyQueueName);\n    }\n  };This custom config would need to be passed as second parameter in StompRPCService\nconstructor, or, can be passed as an Angular Dependency.\nApart from this additional setup step usage remains same as RabbitMQ case as documented above.\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/contributing.html":{"url":"additional-documentation/contributing.html","title":"additional-page - Contributing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContributing\nDevelopment\nAfter checking out from GitHub, install the dependencies:\n$ npm installor, if using yarn:\n$ yarnTo generate documentation:\n$ npm run docTo lint all *.ts files:\n$ npm run lint\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
